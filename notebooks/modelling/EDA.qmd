---
title: "Exploratory Data Analysis"
author: "by A.G."
date: "last update: `r format(Sys.Date(), format = '%d %B %Y')`"
format: 
  html:
    theme: "sandstone"
    toc: true
    toc-depth: 2
    toc-title: Contents
    toc-location: left
    df-print: paged
    standalone: true
    self-contained: true
    code-fold: true
editor: source
---

```{r, message=FALSE, warning=FALSE}
library(tidymodels)
library(ggpubr)
library(ggtext) # for text formatting in the plots
library(factoextra)
library(cluster)
library(skimr)
library(readr)
library(themis) # smote
library(ggforce) # for plot_validation_results()
library(embed) # for umap and PCA variants
library(scales)
library(bestNormalize) # ORQ normalization
source("functions.R")

# my color palette
my_colors <- RColorBrewer::brewer.pal(9, "Set1")[c(1,2)]
```

# Intro

Here I explore features of strains tested as HR and non-HR.

------------------------------------------------------------------------

## Read the data

Data set `data_strain` has been made earlier in `features.qmd`

Copy the most up to date version of features tables to `data/`

```{bash, eval=FALSE}
#| eval: FALSE
# should work but might need fixing because of changed absolute path
rsync ~/Data/HeteroR/results/tables/features.csv.gz ./data
rsync ~/Data/HeteroR/results/tables/features_strain.csv ./data
rsync ~/Data/HeteroR/results/tables/amr_types_strain.csv ./data
```

Read features and classification labels

```{r, message=FALSE}
# columns with oriC and plus-strand do not exist anymore
data_strain <- read_csv("data/features_strain.csv", na = c("NA", "-Inf")) %>% 
  # outliers on the tree
  filter(!(strain %in% c("DA63246", "DA63068"))) %>% 
  mutate(chrom.status = factor(chrom.status)) %>% 
  relocate(strain, .before = n.beta.lac.plasmid)

hr_testing <- read_csv("data/heteroresistance_testing.csv") %>% 
  filter(!is.na(strain), resistance != "R")

data_strain <- data_strain %>% 
  left_join(hr_testing, by = "strain") %>% 
  mutate(resistance = factor(resistance, levels = c("HR", "nonHR"))) %>% 
  filter(!is.na(resistance))

# keep strains elsewhere
strains <- data_strain$strain

dim(data_strain)
```

## Descriptive stats

### Factors

```{r}
skim(data_strain) %>% 
  yank("factor")
```

#### Target class distribution

```{r}
data_strain %>% 
  group_by(resistance) %>% 
  count()
```

### Circularity in tested strains

```{r}
data_strain %>% 
  group_by(resistance, chrom.status) %>% 
  count()
```


```{r}
data_strain %>% 
  group_by(resistance, chrom.status) %>% 
  count() %>% 
  ggplot(aes(chrom.status, n)) +
  geom_col(position = "dodge", fill="steelblue", alpha = 0.7) + 
  facet_grid(cols = vars(resistance)) +
  theme_bw()
```

### Numerical

```{r}
skim(data_strain) %>% 
  yank("numeric")
```

All the missing values should be replaced with zero except N50.

N50 statistic comes only from Unicycler logs, that's why it is not available for that many strains

I will remove it.

```{r}
# Remove n.beta.lac.chrom & nc.beta.lac.plasmid -> 1st one has negative numbers, 2nd one has many NAs
data_strain$nc.beta.lac.plasmid <- NULL
data_strain$n.beta.lac.chrom <- NULL
data_strain[is.na(data_strain)] <- 0

dim(data_strain)
```

Write the first processed version of the data set to shiny's data directory

```{r, eval=FALSE}
write.csv(data_strain, file = "EDA_app/data/features_strain.csv", row.names = FALSE)
```

All pre-processing will be done with `recipes`

------------------------------------------------------------------------

# Data exploration starts here

## Correlation plot

With ORQ Normalization

```{r, fig.width=12, fig.height=12, warning=FALSE}
orq_recipe <- recipe(resistance ~., data = data_strain) %>%
  update_role(strain, new_role = "ID") %>%
  step_nzv(all_predictors()) %>% 
  step_orderNorm(all_numeric_predictors()) %>% 
  step_dummy(all_nominal_predictors())

data_orq <- orq_recipe %>% prep() %>% juice()

# without resistance
cor_matrix_norm <- data_orq %>% 
  select(-c(strain, resistance)) %>%
  cor(use = "pairwise.complete.obs", method = "spearman")

corrplot::corrplot(cor_matrix_norm, type = "upper", tl.col = "black", tl.cex = 0.6)
```

## PCA

### PCA plot

based on recipe with ORQ normalization

```{r}
# the winning PCA recipe from modelling.Rmd
pcayj_recipe <- 
  recipe(resistance ~ ., data = data_strain) %>%
  update_role(strain, new_role = "ID") %>%
  step_nzv(all_predictors()) %>% 
  step_dummy(all_nominal_predictors()) %>% 
  step_YeoJohnson(all_numeric_predictors())  %>%
  step_normalize(all_numeric_predictors()) %>% 
  step_pca(all_numeric_predictors(), num_comp = 4) %>% 
  step_normalize(all_numeric_predictors())

Fig_PCA <- pcayj_recipe %>% 
  prep() %>% 
  juice() %>% 
  plot_validation_results(c("PC1", "PC2", "PC3", "PC4"), my_colors) +
  ggtitle("Principal Component Analysis")

Fig_PCA
```

### Explained variance percentage

```{r}
# find the step number corresponding to PCA, here it's 5
data_pca <- prep(pcayj_recipe, retain = TRUE)
sdev <- data_pca$steps[[5]]$res$sdev
percent_variation <- sdev^2 / sum(sdev^2)

var_df <- data.frame(PC = paste0("PC", 1:length(sdev)),
                     var_explained = percent_variation,
                     stringsAsFactors = FALSE)

var_df <- var_df %>% 
  mutate(var_cum_sum = cumsum(var_explained))

var_df
```

#### Plot

```{r, fig.width=12, fig.height=6}
var_df %>%
  mutate(PC = forcats::fct_inorder(PC)) %>%
  slice_head(n = 20) %>% 
  ggplot(aes(x = PC, y = var_explained)) + 
  geom_col(aes(fill = var_cum_sum)) +
  theme(axis.text.x = element_text(angle = 45, vjust = 0.5, size = 15)) +
  scale_fill_continuous(type = "viridis") +
  xlab("") +
  ylab("explained variance") + 
  labs(fill = "cumulative variance")
```

### Top loadings

10 PCs that explain 70% of variance

```{r, message=FALSE, warning=FALSE, fig.width=15, fig.height=6}
if (!require(learntidymodels, quietly = TRUE))  
  devtools::install_github("tidymodels/learntidymodels")

data_pca %>%
  plot_top_loadings(component_number <= 6, n = 5) + 
  scale_fill_brewer(palette = "Paired") +
  ggtitle("Principal Components Decomposition")
```

## UMAP - uniform manifold approximation and projection

> while high values will push UMAP towards representing the big-picture structure while losing fine detail.

### Unsupervised

```{r, message=FALSE, warning=FALSE, fig.width=8}
umap_yj_recipe <- 
  recipe(resistance ~ ., data = data_strain) %>%
  update_role(strain, new_role = "ID") %>%
  step_nzv(all_predictors()) %>% 
  step_dummy(all_nominal_predictors()) %>% 
  step_normalize(all_numeric_predictors()) %>%
  step_YeoJohnson(all_numeric_predictors())  %>%
  step_normalize(all_numeric_predictors()) %>% 
    step_umap(
    all_numeric_predictors(),
    num_comp = 10,
    min_dist = 0.8,
    neighbors = 25
  ) %>% 
  step_normalize(all_numeric_predictors())

Fig_UMAPu <- umap_yj_recipe %>%
  prep() %>% 
  juice() %>% 
  plot_validation_results(c("UMAP01", "UMAP02", "UMAP03", "UMAP04"), my_colors) +
  ggtitle("")

Fig_UMAPu
```

### Supervised

Supervised UMAP look really promising. HR clusters are more compact and some of them are more distant from non-HR ones.

```{r, message=FALSE, warning=FALSE, fig.width=8}
umap_sup_yj_recipe <- 
  recipe(resistance ~ ., data = data_strain) %>%
  update_role(strain, new_role = "ID") %>%
  step_nzv(all_predictors()) %>% 
  step_dummy(all_nominal_predictors()) %>% 
  step_normalize(all_numeric_predictors()) %>% 
  step_YeoJohnson(all_numeric_predictors())  %>%
  step_normalize(all_numeric_predictors()) %>% 
    step_umap(
    all_numeric_predictors(),
    outcome = "resistance",
    num_comp = 10,
    min_dist = 0.4,
    neighbors = 25
  ) %>% 
  step_normalize(all_numeric_predictors())

Fig_UMAPs <- umap_sup_yj_recipe %>%
  prep() %>% 
  juice() %>% 
  plot_validation_results(c("UMAP01", "UMAP02", "UMAP03", "UMAP04"), my_colors) +
  ggtitle("") 

Fig_UMAPs
```

### On 'captured variance'

The [answer](https://github.com/lmcinnes/umap/issues/122) of Leland McInnes himself:

> As a non-linear manifold learning technique that ultimately works with metric spaces at its heart rather than feature based data UMAP doesn't really have a notion of explained variance the way algorithms like PCA do. A colleague is working on developing some alternative measures of how well an embedding has performed, but that is still preliminary work and we don't have any published code for that yet -- ultimately UMAP remains a research project with additional features and utilities still being developed.

## Gene presence

This supposed to be the main predictor of HR

### Number of beta-lactamases

#### Bar plot

because number of BL genes is count data.

```{r}
ggplot(data_strain, aes(n.beta.lac)) +
  geom_bar(aes(fill = resistance), position = "dodge") +
  #scale_fill_brewer(palette = "Dark2", direction = -1) +
  scale_fill_manual(values = my_colors) +
  xlab("n beta-lactamases") +
  ylab("n strains") +
  theme(legend.title = element_blank()) +
  scale_x_continuous(breaks = c(1,2,3,4,5,6))
```

```{r}
summary(data_strain$n.beta.lac)
```


#### Proportion

```{r}
Fig_BL_total <- ggplot(data_strain, aes(n.beta.lac)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha = 0.97) +
  scale_fill_brewer(palette = "Set1", name = "") +
  labs(x = "number of *bla* genes",
       y = "proportion of strains") +
  scale_x_continuous(breaks = c(1, 2, 3, 4, 5, 6, 7)) +
  theme_minimal() +
  theme(axis.title.x = ggtext::element_markdown())

ggsave(file="manuscript/images/Fig_BL_total.pdf", plot=Fig_BL_total,
       width = 8, height=4, units = "in")

Fig_BL_total
```

**OBS!**

1.  If number of BL-genes is higher than 4, the strain is more likely to be HR

2.  There are `r nrow(data_strain %>% filter(n.beta.lac == 1, resistance == "HR"))` HR strain with only 1 beta-lactamase (which is *ampC*)

#### BL \> 4 proportion

When number of BL genes is greater than 3, quite likely that the strain is HR or R

```{r, eval = F}
Fig_BL_greater_4 <- data_strain %>% 
  mutate(n.beta.lac.4 = factor(ifelse(n.beta.lac > 4, "yes", "no"))) %>%
  ggplot(aes(n.beta.lac.4)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha=0.97) +
  scale_fill_brewer(palette="Set1", name = "") +
  labs(x = "number of β-lactamases", y = "proportion of strains") +
  scale_x_discrete(labels = c("no" = "≤4", "yes" = ">4")) +
  theme_minimal()

ggsave(file="manuscript/images/Fig_BL_greater_4.pdf", plot=Fig_BL_greater_4, 
       width = 8, height=4, units = "in")

Fig_BL_greater_4
```

Now the chance of being HR is higher than the chance of being nonHR


### TEM beta-lactamase

As proportion:

```{r}
Fig_TEM <- ggplot(data_strain, aes(TEM.beta.lactamase)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha = 0.97) +
  scale_fill_brewer(palette = "Set1", name = "") +
  labs(x = "number of *bla*<sub>*TEM*</sub> genes", 
       y = "proportion of strains") +
  theme_minimal() +
  theme(axis.title.x = ggtext::element_markdown())

ggsave(file="manuscript/images/Fig_TEM.pdf", plot=Fig_TEM, 
       width = 8, height=4, units = "in")

Fig_TEM
```

#### Plot: All BL & TEM together

```{r, fig.height=8, fig.width=8}
Fig_BL_TEM <- ggarrange(
  Fig_BL_total,
  Fig_TEM,
  ncol = 1,
  nrow = 2,
  labels = c("a", "b"),
  common.legend = TRUE
)

ggsave(file="manuscript/images/Fig_BL_TEM.pdf", 
       plot=Fig_BL_TEM, width = 10, height=8, units = "in")

Fig_BL_TEM
```


### Regression: BL vs HR

Let's fit a logistic regression

```{r}
logreg_nbl_fit <- glm(resistance ~ n.beta.lac, data = data_strain, family = "binomial")
summary(logreg_nbl_fit)
```

```{r}
exp(coef(logreg_nbl_fit))
```

### Beta-lactamases on plasmids and chromosome

Variable `n.genes.plasmids` means number of **beta-lactamases** on plasmids (it was renamed).

Let's check this.

It should always be less or equal than `n.beta.lac`.

How many strains in our data set `n.beta.lac` greater or equal `n.beta.lac.plasmid`: `r sum(data_strain$n.beta.lac >= data_strain$n.beta.lac.plasmid)`

How many strains in total: `r nrow(data_strain)`

These numbers must be equal.

#### Number of beta-lact on plasmids

```{r}
ggplot(data_strain, aes(n.beta.lac.plasmid)) +
  geom_bar(aes(fill = resistance), position = "dodge", alpha = 0.8) +
  scale_fill_brewer(palette = "Set1", name = "") +
  #scale_x_continuous(breaks = c(0,1,2,3,4,5,6,7,8)) +
  xlab("n beta-lactamases on plasmids") +
  ylab("n strains")
```

As a proportion

```{r}
Fig_BL_plasmid <- data_strain %>% 
  ggplot(aes(n.beta.lac.plasmid)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha = 0.8) +
  scale_fill_brewer(palette = "Set1", name = "") +
  #scale_x_continuous(breaks = c(0,1,2,3,4,5,6)) +
  xlab("n β-lactamases on plasmids") +
  ylab("proportion")

Fig_BL_plasmid
```

#### Number of beta-lact on chrom

Classic bar plot

```{r, eval=F}
ggplot(data_strain, aes(n.beta.lac.chrom)) +
  geom_bar(aes(fill = resistance), position = "dodge", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  scale_x_continuous(breaks = c(0,1,2,3,4,5, 6)) +
  xlab("n beta-lactamases on chromosome") +
  ylab("n strains")
```

As proportion:

```{r, eval=F}
ggplot(data_strain, aes(n.beta.lac.chrom)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  scale_x_continuous(breaks = c(0,1,2,3,4,5, 6)) +
  xlab("n beta-lactamases on chromosome") +
  ylab("proportion")
```

#### Proportion bar plot

```{r, eval=F}
bl_loc_sum <- data_strain %>% 
  select(resistance, n.beta.lac.plasmid, n.beta.lac.chrom) %>% 
  gather("loc", "N", 2:3) %>% 
  filter(N > 0) %>% 
  group_by(resistance, loc) %>% 
  summarise(sum.n = sum(N))

ggplot(bl_loc_sum, aes(loc, sum.n)) +
  geom_col(aes(fill = resistance), position = "fill") +
  scale_fill_brewer(palette = "Set1") +
  xlab("") +
  ylab("proportion") +
  scale_x_discrete(labels = c("on chromosome", "on plasmids")) +
  theme(legend.title = element_blank())
```

If a strain has BL genes on chromosome only it's more likely to be non-HR than HR

#### On chromosomes and plasmids among HR and nonHR

```{r, eval=F}
ggplot(bl_loc_sum, aes(resistance, sum.n)) +
  geom_col(aes(fill = loc), position = "fill") +
  scale_fill_brewer(palette = "Set2") +
  xlab("") +
  ylab("proportion") +
  #scale_x_discrete(labels = c("on chromosome", "on plasmids")) +
  theme(legend.title = element_blank())
```


### ampC and non-ampC beta-lactamases

```{r}
bl_type_count <- data_strain %>% 
  select(resistance, n.beta.lac, ampC.type.beta.lactamase) %>% 
  mutate(non.ampC = n.beta.lac - ampC.type.beta.lactamase) %>% 
  select(-n.beta.lac)

bl_type_count_tidy <- gather(bl_type_count, key = "gene", value = "n", 2:3) %>% 
  group_by(resistance, gene) %>% 
  summarize(sum=sum(n))


Fig_ampC <- ggplot(bl_type_count_tidy, aes(gene, sum))+
  geom_col(aes(fill=resistance), position = "fill", alpha = 0.8) + 
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("") +
  ylab("proportion")+
  scale_x_discrete(labels = c("ampC", "non-ampC"))

Fig_ampC
```

```{r, fig.height=8, fig.width=6, eval=FALSE}
legend <- get_legend(Fig_ampC)

empty_plot_with_legend <- 
  ggplot() + 
  theme_void() +
  annotation_custom(grob = legend, xmin = -0.7, xmax = Inf, ymin = 0.2, ymax = Inf)

Fig_ <- ggarrange(Fig_6A + theme(legend.position = "bottom"), 
                   Fig_6B + theme(legend.position = "none"),
                   #empty_plot_with_legend,
                   ncol = 1, nrow = 2, labels = c("A", "B"))

Fig_6
```

### Repeat count without 0s

```{r}
data_strain %>% 
  filter(n.rep.plasmid.TEM > 0) %>% 
  ggplot(aes(resistance, n.rep.plasmid.TEM)) +
  geom_violin(aes(fill=resistance), alpha=0.7)+
  geom_boxplot(aes(fill=resistance), alpha=0.2, notch = T, varwidth = T)+
  geom_jitter(alpha=0.2, width=0.15, height = 0.1)+
  scale_fill_brewer(palette = "Pastel1") +
  coord_trans(y="sqrt") +
  ylab("") +
  guides(fill="none")
```

### Median AR length without 0s

```{r}
data_strain %>% 
  filter(med.AR.len.chrom.TEM > 0) %>% 
  ggplot(aes(resistance, med.AR.len.chrom.TEM)) +
  geom_violin(aes(fill=resistance), alpha=0.7)+
  geom_boxplot(aes(fill=resistance), alpha=0.2, notch = F, varwidth = T)+
  geom_jitter(alpha=0.2, width=0.15, height = 0.1)+
  scale_fill_brewer(palette = "Pastel1") +
  coord_trans(y="sqrt") +
  ylab("") +
  guides(fill="none")
```

### Median repeat length on plasmids

```{r}
data_strain %>% 
  filter(med.rep.len.plasmid.TEM > 0) %>% 
  ggplot(aes(resistance, med.rep.len.plasmid.TEM)) +
  geom_violin(aes(fill=resistance), alpha=0.7)+
  geom_boxplot(aes(fill=resistance), alpha=0.2, notch = F, varwidth = T)+
  geom_jitter(alpha=0.2, width=0.15, height = 0.1)+
  scale_fill_brewer(palette = "Pastel1") +
  coord_trans(y="sqrt") +
  ylab("") +
  guides(fill="none")
```

## Beta-lactamases heatmap

### AMR types in each strain

highlight BLs somehow!

```{r, fig.width=20, fig.height=6}
# I read in amr type counts form the table made in features.qmd

amr_types_strain <- read_csv("data/amr_types_strain.csv", show_col_types = FALSE)

# make tidy for ggplot
amr_types_strain_td <- gather(amr_types_strain, key = "AMR.type", value = "N", 2:ncol(amr_types_strain))

# amr_gene_types <- features %>%
#   select(strain, record_id, AMR.Gene.Family) %>% 
#   distinct() %>% 
#   filter(!is.na(AMR.Gene.Family)) %>% 
#   mutate(AMR.Gene.Family = sub("\\'+)$", "')", AMR.Gene.Family))
# 
# amr_gene_types_count <-
#   amr_gene_types %>% group_by(strain, AMR.Gene.Family) %>% count()

# make a plot
ggplot(amr_types_strain_td, aes(strain, AMR.type)) + 
  geom_tile(aes(fill = N)) +
  theme(axis.text.x = element_text(
    angle = 45,
    vjust = 0.2,
    hjust = 1,
    size = 3
  )) +
  xlab("") +
  scale_fill_gradient2(high = "blue")
```

*ampC* is present in every strain

#### Interactive version

```{r, fig.width=12}
library(plotly)

vals <- scales::rescale(c(0:max(amr_types_strain_td$N)))
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Blues", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
fig <- plot_ly(z = amr_types_strain_td$N, 
               x = amr_types_strain_td$strain, 
               y = amr_types_strain_td$AMR.type, 
               type = "heatmap", 
               colorscale = colz)
fig
```

## Coverage

### Plot

```{r}
Fig_coverage <- 
  data_strain %>%
  ggplot(aes(resistance, coverage)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(
    aes(fill = resistance),
    alpha = 0.2,
    notch = F,
    varwidth = T
  ) +
  geom_jitter(alpha = 0.2,
              width = 0.15,
              height = 0.1) +
  scale_fill_brewer(palette = "Pastel1", name = "") +
  theme_minimal() +
  ggtitle("") +
  labs(x = "", y = "sequencing coverage") +
  guides(fill = "none")

Fig_coverage
```

### KW test

```{r}
kruskal.test(data_strain$coverage, data_strain$resistance)
```

### Medians

```{r}
data_strain %>% group_by(resistance) %>% summarise(median=median(coverage))
```

## Sequencing reads lengths

```{r}
Fig_longest_read <-
  data_strain %>%
  ggplot(aes(resistance, read.max.len)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(
    aes(fill = resistance),
    alpha = 0.2,
    notch = F,
    varwidth = T
  ) +
  geom_jitter(alpha = 0.2,
              width = 0.15,
              height = 0.1) +
  scale_fill_brewer(palette = "Pastel1", name = "") +
  theme_minimal() +
  ggtitle("") +
  labs(x = "", y = "longest read, nt") +
  guides(fill = "none")

Fig_longest_read
```

### KW test

```{r}
kruskal.test(data_strain$read.max.len, data_strain$resistance)
```

## Read length vs Coverage

```{r}
data_strain %>% 
  ggplot(aes(read.max.len, coverage)) +
  geom_point(aes(color = resistance), alpha=0.6) +
  scale_color_brewer(palette = "Set1") +
  ggtitle("") +
  guides(fill = "none")
```

```{r}
cor.test(data_strain$read.max.len, data_strain$coverage, method = "kendall")
```

## Number of plasmids

Per strain, doesn't depend on beta-lactamase presence or absence

### Box plot

```{r}
data_strain %>%
  ggplot(aes(resistance, n.plasmids)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(
    aes(fill = resistance),
    alpha = 0.2,
    notch = F,
    varwidth = T
  ) +
  geom_jitter(alpha = 0.2,
              width = 0.15,
              height = 0.1) +
  scale_fill_brewer(palette = "Pastel1") +
  ggtitle("") +
  ylab("n") +
  xlab("") +
  guides(fill = "none")

```

### Medians

```{r}
data_strain %>% group_by(resistance) %>% summarise(median=median(n.plasmids))
```

### Poisson model for count data

```{r}
summary(glm(n.plasmids ~ resistance, data=data_strain, family = "poisson"))
```

### Plasmids vs Coverage

```{r}
data_strain %>%
  ggplot(aes(coverage, n.plasmids)) +
  geom_point(aes(color = resistance), alpha = 0.5) +
  scale_color_brewer(palette = "Set1") +
  ggtitle("") +
  ylab("n") +
  xlab("coverage") +
  guides(fill = "none")
```

### Poisson model for count data

```{r}
pois_fit <- glm(n.plasmids ~ coverage, data=data_strain, family = "poisson")
summary(pois_fit)
```

```{r}
exp(coef(pois_fit))
```

Increase of `coverage` by 1 unit decreases `n.plasmids` 0.99 times - which is very slow decrease, though (and barely significant)

## Number of plasmids vs completeness

### Plot

```{r}
data_strain %>%
  ggplot(aes(chrom.status, n.plasmids)) +
  geom_violin(aes(fill = chrom.status), alpha = 0.7) +
  geom_boxplot(
    aes(fill = chrom.status),
    alpha = 0.2,
    notch = F,
    varwidth = T
  ) +
  geom_jitter(alpha = 0.2,
              width = 0.15,
              height = 0.1) +
  scale_fill_brewer(palette = "Set2") +
  ggtitle("") +
  ylab("n plasmids") +
  xlab("") +
  guides(fill = "none")
```

### Poisson model for count data

```{r}
pois_fit <- glm(n.plasmids ~ chrom.status, data=data_strain, family = "poisson")
summary(pois_fit)
```

```{r}
exp(coef(pois_fit))
```

'linearity' increases `n.plasmids` in 1.7 times

## Plasmid copy number

```{r}
data_strain %>%
  ggplot(aes(resistance, n.c.plasmids)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(
    aes(fill = resistance),
    alpha = 0.2,
    notch = F,
    varwidth = T
  ) +
  geom_jitter(alpha = 0.2,
              width = 0.15,
              height = 0.1) +
  scale_fill_brewer(palette = "Pastel1") +
  ggtitle("") +
  ylab("n") +
  xlab("") +
  guides(fill = "none") 
```


#### Poisson model for count data

```{r}
pois_fit <- glm(n.c.plasmids ~ resistance, data=data_strain, family = "poisson")
summary(pois_fit)
```

```{r}
exp(coef(pois_fit))
```

nonHR decreases `n.c.plasmids` times 0.72

### Copy number vs Coverage

```{r}
data_strain %>%
  ggplot(aes(coverage, n.c.plasmids)) +
  geom_point(aes(color = resistance), alpha = 0.5) +
  scale_color_brewer(palette = "Set1") +
  ggtitle("") +
  ylab("plasmid copy number") +
  xlab("coverage") +
  guides(fill = "none")
```

#### Poisson model for count data

```{r}
pois_fit <- glm(n.c.plasmids ~ coverage, data=data_strain, family = "poisson")
summary(pois_fit)
```

```{r}
exp(coef(pois_fit))
```



## Copy number vs number of plasmids

```{r}
data_strain %>%
  ggplot(aes(n.plasmids, n.c.plasmids)) +
  geom_point(aes(color = resistance), alpha = 0.5) +
  scale_color_brewer(palette = "Set1") +
  ggtitle("") +
  ylab("cn") +
  xlab("n") +
  guides(fill = "none")
```

### Poisson model for count data

```{r}
pois_fit <- glm(n.c.plasmids ~ n.plasmids, data=data_strain, family = "poisson")
summary(pois_fit)
```

```{r}
exp(coef(pois_fit))
```

increase in `n.plasmids` by 1 unit increases `n.c.plasmids` 1.4 times

## Copy number of plasmids and completeness

```{r}
data_strain %>%
  ggplot(aes(chrom.status, n.c.plasmids)) +
  geom_violin(aes(fill = chrom.status), alpha = 0.7) +
  geom_boxplot(
    aes(fill = chrom.status),
    alpha = 0.2,
    notch = F,
    varwidth = T
  ) +
  geom_jitter(alpha = 0.2,
              width = 0.15,
              height = 0.1) +
  scale_fill_brewer(palette = "Set2") +
  ggtitle("") +
  ylab("n") +
  xlab("") +
  guides(fill = "none")
```

### Poisson model for count data

```{r}
pois_fit <- glm(n.c.plasmids ~ chrom.status, data=data_strain, family = "poisson")
summary(pois_fit)
```

```{r}
exp(coef(pois_fit))
```

'linearity' increases `n.c.plasmids`

## Median repeat length

```{r}
med_rep_len <- data_strain %>% 
  select(resistance, med.rep.len.chrom, med.rep.len.plasmid, med.rep.len) %>% 
  dplyr::rename('chromosome' = "med.rep.len.chrom" ,
         'plasmids' = "med.rep.len.plasmid",
          'total' = "med.rep.len") %>% 
  gather("location", "median", 2:4)

# how a median of 0 can appear in the table?
# they can come from strains with 0 repeats and I have such strains
# therefore before plotting medians such observations should be removed

Fig_med_rep_len <- 
  med_rep_len %>% 
  # remove median = 0
  filter(median > 0) %>%
  ggplot(aes(resistance, median)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(
    aes(fill = resistance),
    alpha = 0.2,
    notch = F,
    varwidth = T,
    outlier.shape = NA
  ) +
  geom_jitter(
    alpha = 0.2,
    width = 0.05,
    height = 0.1,
    size = 0.8
  ) +
  scale_fill_brewer(palette = "Pastel1") +
  coord_trans(y = "log") +
  facet_grid(cols = vars(location)) +
  labs(x = "", y = "median repeat length, nt") +
  # scale_y_continuous(breaks = c(30, 50, 100, 250, 500, 750)) +
  guides(fill = "none") +
  theme_minimal()

Fig_med_rep_len
```


```{r}
med_rep_len %>% 
  filter(location == "total") %>% 
  group_by(resistance) %>% 
  summarise(median = median(median))
```


```{r}
kruskal.test(data_strain$med.rep.len, data_strain$resistance)
```


## Maximum repeat length

```{r}
max_rep_len <- data_strain %>% 
  select(resistance, max.rep.len.chrom, max.rep.len.plasmid, max.rep.len) %>% 
  gather("location", "max.len", 2:4)

#max_rep_len$max.len <- if_else(max_rep_len$max.len == 0, 1, max_rep_len$max.len)

facet_names <- c("max.rep.len.chrom" = "chromosome",
                 "max.rep.len.plasmid" = "plasmids",
                 "max.rep.len" = "total")

max_rep_len %>%
  filter(max.len > 0) %>%
  ggplot(aes(resistance, max.len)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(
    aes(fill = resistance),
    alpha = 0.2,
    notch = F,
    varwidth = T,
    outlier.shape = NA
  ) +
  geom_jitter(
    alpha = 0.2,
    width = 0.05,
    height = 0.1,
    size = 0.8
  ) +
  scale_fill_brewer(palette = "Pastel1") +
  coord_trans(y = "sqrt") +
  facet_grid(cols = vars(location), labeller = as_labeller(facet_names)) +
  ylab("max repeat length") +
  xlab("") +
  guides(fill = "none")
```

```{r}
max_rep_len %>% 
  filter(location == "max.rep.len") %>% 
  group_by(resistance) %>% 
  summarise(median = median(max.len))
```

```{r}
max_rep_len %>% 
  filter(location == "max.rep.len.plasmid", max.len > 0) %>% 
  group_by(resistance) %>% 
  summarise(median = median(max.len))
```

## Repeat counts

```{r}
rep_count <- data_strain %>% 
  select(resistance, n.rep.chrom, n.rep.plasmid, n.rep.total) %>% 
  gather("location", "n.rep", 2:4)

#rep_count$n.rep <- if_else(rep_count$n.rep == 0, 1, rep_count$n.rep) 

facet_names <- c("n.rep.chrom" = "chromosome",
                 "n.rep.plasmid" = "plasmids",
                 "n.rep.total" = "total")

Fig_rep_count <-
  rep_count %>% 
  ggplot(aes(resistance, n.rep)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(
    aes(fill = resistance),
    alpha = 0.2,
    notch = F,
    varwidth = T,
    outlier.shape = NA
  ) +
  geom_jitter(
    alpha = 0.2,
    width = 0.05,
    height = 0.1,
    size = 0.8
  ) +
  scale_fill_brewer(palette = "Pastel1", name = "") +
  facet_grid(cols = vars(location), labeller = as_labeller(facet_names)) +
  labs(x = "", y = "number of repeats") +
  guides(fill = "none") +
  theme_minimal()

Fig_rep_count
```


```{r}
rep_count %>% 
  group_by(location, resistance) %>% 
  summarise(median = median(n.rep))
```

Poisson regression

```{r}
rep.count.regr <- glm(n.rep ~ resistance, 
    data=rep_count %>% filter(location == "n.rep.total"),
    family = "poisson")

summary(rep.count.regr)
```

```{r}
exp(coef(rep.count.regr))
```


## Amplifiable region size

*A note on 0 nt long AR in the data.strain table*


In data.strain table AR sizes for each strain are averaged across all repeat pairs in this strain, plus all NAs were replaced by 0s, which in turn means that every median AR that equals 0 is in fact either NA or a median of an array with many 0s, for example `median(c(0,0,0,0,5)) == 0`.

AR of size 0 is non-existing AR and should be excluded form the analysis.

```{r, warning=FALSE}
ar_len <- data_strain %>% 
  select(resistance, med.AR.len.chrom, med.AR.len.plasmid, med.AR.len) %>% 
  dplyr::rename(chromosome = med.AR.len.chrom,
          plasmids = med.AR.len.plasmid,
          total = med.AR.len) %>% 
  gather("location", "ar.len", 2:4)



Fig_AR_len <- ar_len %>%
  filter(ar.len > 0) %>%
  ggplot(aes(resistance, ar.len)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(
    aes(fill = resistance),
    alpha = 0.2,
    notch = F,
    varwidth = T,
    outlier.shape = NA
  ) +
  geom_jitter(
    alpha = 0.2,
    width = 0.05,
    height = 0.1,
    size = 0.8
  ) +
  scale_fill_brewer(palette = "Pastel1") +
  scale_y_continuous(labels = label_log(base = 10),
                     breaks = c(1, 10000, 100000)) +
  facet_grid(cols = vars(location)) +
  theme(panel.grid.minor = element_line(size = 0)) +
  labs(x = "", y = "median AR length, nt") +
  guides(fill = "none") +
  theme_minimal()
  
Fig_AR_len
```


### Medians

```{r}
ar_len %>% 
  filter(ar.len > 0) %>% 
  group_by(location, resistance) %>%
  summarise(median = median(ar.len))
```

### Kruskal-Wallis test: total

```{r}
ar_len_kw <- function(loc, ar_df = ar_len){
  df <- ar_df %>% filter(location == loc, ar.len > 0)
  return(kruskal.test(df$ar.len, df$resistance))
}

ar_len_kw("total")
```

### Kruskal-Wallis test: plasmids

```{r}
ar_len_kw("plasmids")
```


### Kruskal-Wallis test: chromosomes

```{r}
ar_len_kw("chromosome")
```


### Final plot (repeats + AR)

```{r,fig.height=8, fig.width=6}
Fig_rep_count_rep_len_AR_len <- ggarrange(Fig_rep_count, Fig_med_rep_len, Fig_AR_len,
                    labels = c("a", "b", "c"),
                    ncol = 1, nrow = 3)

ggsave(file="manuscript/images/Fig_rep_count_rep_len_AR_len.pdf", 
       plot=Fig_rep_count_rep_len_AR_len, width = 8, height=10, units = "in")

Fig_rep_count_rep_len_AR_len
```


## IS sequences

### IS family count

```{r}
colnames <- data_strain %>% 
  select(strain, resistance, contains("IS", ignore.case = FALSE)) %>% names()

Fig_IS_fam_prop <- data_strain %>% 
  select(strain, resistance,  contains("IS", ignore.case = FALSE)) %>% 
  pivot_longer(cols = colnames[3:22], names_to = "is.family", values_to = "n") %>% 
  # summarize before plotting to avoid stripes on the bars
  group_by(resistance, is.family) %>% 
  summarise(N = sum(n)) %>% 
  ggplot(aes(is.family, N)) +
  geom_col(aes(fill=resistance), position = "fill") +
  scale_fill_brewer(palette = "Set1", name = "") +
  labs(x = NULL, y = "proportion of strains") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) 

ggsave(file="manuscript/images/Fig_IS_fam_prop.pdf", plot=Fig_IS_fam_prop, 
       width = 8, height=4, units = "in")

Fig_IS_fam_prop
```

### IS max length

#### Plot

```{r}
Fig_IS_max_len <- data_strain %>% 
  ggplot(aes(resistance, max.is.len)) +
  geom_violin(aes(fill=resistance), alpha=0.7)+
  geom_boxplot(aes(fill=resistance), alpha=0.2, notch = T, varwidth = T)+
  geom_jitter(alpha=0.2, width=0.15, height = 0.1)+
  scale_fill_brewer(palette = "Pastel1", name = "") +
  coord_trans(y="sqrt") +
  labs(x = "", y = "length of the longest IS element, nt") +
  guides(fill="none") +
  theme_minimal()

Fig_IS_max_len
```

#### Medians

```{r}
data_strain %>% 
  group_by(resistance) %>% 
  summarise(median = median(max.is.len))
```

#### KW test

```{r}
kruskal.test(data_strain$max.is.len, data_strain$resistance)
```

### IS copies count

#### Plot

```{r}
Fig_IS_copies <- data_strain %>% 
  ggplot(aes(resistance, n.is.tot)) +
  geom_violin(aes(fill=resistance), alpha=0.7)+
  geom_boxplot(aes(fill=resistance), alpha=0.2, notch = T, varwidth = T)+
  geom_jitter(alpha=0.2, width=0.15, height = 0.1)+
  scale_fill_brewer(palette = "Pastel1") +
  coord_trans(y="sqrt") +
  labs(y = "number of IS copies", x = "") +
  guides(fill="none") +
  theme_minimal()

Fig_IS_copies
```

#### Medians

```{r}
data_strain %>% 
  group_by(resistance) %>% 
  summarise(median = median(n.is.tot))
```

#### KW test

```{r}
kruskal.test(data_strain$n.is.tot, data_strain$resistance)
```
#### Correlation with number of beta-lactamases

H1: number of IS per strain correlate with number of beta-lactamase genes, because the regions scanned for IS elements are taken around beta-lac genes and are overlapping, therefore making IS counts inflated.

```{r}
data_strain %>% 
  ggplot(aes(n.beta.lac, n.is.tot)) +
  geom_point(aes(color = resistance)) +
  scale_color_brewer(palette = "Pastel1") +
  theme_minimal()
```

Poisson regression: count Y ~ continuous X

```{r}
fit <- glm(n.beta.lac ~ n.is.tot + resistance, data = data_strain, family = "poisson")
summary(fit)
```

exp() the coefficients:

```{r}
exp(coef(fit))
```

Correlation coefficient:

- Kendall's tau

```{r}
cor.test(data_strain$n.beta.lac, 
         data_strain$n.is.tot, 
         method = "kendall")
```

- Spearman's rho

```{r}
cor.test(data_strain$n.beta.lac,
         data_strain$n.is.tot,
         method = "spearman",
         exact = F)
```


### Total family number

#### Plot

```{r}
Fig_IS_families <- data_strain %>% 
  ggplot(aes(resistance, n.is.fam)) +
  geom_violin(aes(fill=resistance), alpha=0.7)+
  geom_boxplot(aes(fill=resistance), alpha=0.2, notch = T, varwidth = T)+
  geom_jitter(alpha=0.2, width=0.15, height = 0.1)+
  scale_fill_brewer(palette = "Pastel1") +
  labs(y = "number of IS families", x = "") +
  guides(fill="none") +
  theme_minimal()

Fig_IS_families
```

#### Medians

```{r}
data_strain %>% 
  group_by(resistance) %>% 
  summarise(median = median(n.is.fam))
```

#### Poisson regression

```{r}
isfam_pois_fit <- glm(n.is.fam ~resistance, data = data_strain, family="poisson")

summary(isfam_pois_fit)
```

```{r}
exp(coef(isfam_pois_fit))
```

### min IS distance to the gene

#### Plot

```{r}
Fig_IS_gene_dist <- data_strain %>% 
  ggplot(aes(resistance, min_distance_is_gene)) +
  geom_violin(aes(fill=resistance), alpha=1)+
  geom_boxplot(aes(fill=resistance), alpha=0.2, notch = F, varwidth = T)+
  geom_jitter(alpha=0.2, width=0.15, height = 0.1)+
  scale_fill_brewer(palette = "Pastel1", name = "") +
  labs(x = "", y = "distance between IS and nearest RG, nt") +
  guides(fill="none") +
  theme(axis.text.y = element_text(size = 2)) +
  theme_minimal()

Fig_IS_gene_dist
```

#### Medians

```{r}
data_strain %>% 
  group_by(resistance) %>% 
  summarize(m = median(min_distance_is_gene))
```

#### KW test

```{r}
kruskal.test(data_strain$min_distance_is_gene, data_strain$resistance)
```

### All four plots together

```{r,fig.height=8, fig.width=9}
Fig_IS_all <- ggarrange(Fig_IS_max_len, Fig_IS_gene_dist, Fig_IS_families, Fig_IS_copies,
                    labels = c("a", "b", "c", "d"),
                    ncol = 2, nrow = 2)

ggsave(file="manuscript/images/Fig_IS_all.pdf", plot=Fig_IS_all, width = 8, height=8, units = "in")

Fig_IS_all
```

```{r}
data_strain %>% 
  group_by(resistance) %>% 
  summarise(median = median(min_distance_is_gene, na.rm = T))
```

```{r}
kruskal.test(data_strain$min_distance_is_gene, data_strain$resistance)
```

