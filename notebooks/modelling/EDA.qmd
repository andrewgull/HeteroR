---
title: "Exploratory Data Analysis of Pip/Tazo HR strains"
author: "by A.G."
date: "last update: `r format(Sys.Date(), format = '%d %B %Y')`"
format: 
  html:
    theme: "sandstone"
    toc: true
    toc-depth: 2
    toc-title: Contents
    toc-location: left
    df-print: paged
    standalone: true
    code-fold: true
editor: visual
---

```{r, message=FALSE, warning=FALSE}
library(tidymodels)
library(ggpubr)
library(factoextra)
library(cluster)
library(skimr)
library(readr)
```

# Intro

Here I explore features of strains tested as HR and non-HR according to the most recent update from Karin.

AB is Piperacillin/Tazobactam

------------------------------------------------------------------------

# Read the data

Data set `data_strain` has been made earlier in `features.qmd`

Look at target class distribution in full data set (500 strains)

We have two classifications of HR:

1.  Groups I and II are considered HR

2.  Groups II and III are considered HR

With the 1st classification and a single best model (XGBTree), I got decent results:

|            |     |       |
|------------|-----|-------|
|            | HR  | nonHR |
| HR pred    | 12  | 9     |
| nonHR pred | 4   | 46    |

So, the results below will look different depending on the classification scheme chosen!

Copy the most up to date version of features tables to `data/`

```{bash}
#| eval: FALSE
rsync ~/Data/HeteroR/results/tables/features.csv ./data
rsync ~/Data/HeteroR/results/tables/features_strain.csv ./data
```

Read features and classification labels

```{r, message=FALSE}
data <- read_csv("data/features.csv")

data_strain <- read_csv("data/features_strain.csv", na = c("NA", "-Inf"))

# TWO SCHEMES IN TWO FILES
hr_testing <- read_csv("data/heteroresistance_testing_gr12.csv")

hr_testing %>% 
  group_by(resistance) %>% 
  count()
```

Quite imbalanced target class

Look at target class distribution in the data set you're working with (521 strains)

```{r}
data_strain <- data_strain %>% 
  left_join(hr_testing, by = "strain")

data_strain %>% 
  group_by(resistance) %>% 
  count()
```

For testing scheme 1+2, there are 81 HR, 377 nonHR, 13 R and 50 NAs

For the scheme 2+3, there are 52 HR, 406 nonHR, 13 R and 50 NAs

I will start with the scheme 1+2, because it gives more HR strains

## Some additional features and filtering

1.  Add BL genes counts as ordered factor and as binary features (if BL \> 3)

2.  Filter/Rename HR labels (we're not doing this)

3.  Remove R strains

```{r}
# keep strains elsewhere
strains <- data_strain$strain

data_strain <- data_strain %>% 
  mutate(n.beta.lac.3 = factor(ifelse(n.beta.lac > 3, "yes", "no"))) %>% 
  mutate(n.beta.lac.4 = factor(ifelse(n.beta.lac > 4, "yes", "no"))) %>% 
  relocate(n.beta.lac.3, n.beta.lac.4, .before = "n.plasmids") %>% 
  filter(resistance != "R") %>% 
  mutate(resistance = factor(resistance, levels = c("HR", "nonHR")),
         chrom.status = factor(chrom.status))
  
data_strain
```

# Descriptive stats

## Factors

```{r}
skim(data_strain) %>% 
  yank("factor")
```

## Circularity in tested strains

```{r}
data_strain %>% 
  group_by(resistance, chrom.status) %>% 
  count() %>% 
  ggplot(aes(chrom.status, n)) +
  geom_col(position = "dodge") + 
  facet_grid(cols = vars(resistance))
```

## Numerical

```{r}
skim(data_strain) %>% 
  yank("numeric")
```

All the missing values should be replaced with zero except N50.

N50 statistic comes only from Unicycler logs, that's why it is not available for that many strains

I will remove it.

```{r}
data_strain$N50 <- NULL
```

There is also a weird `NA.` column, I will remove it as well.

```{r}
data_strain$NA. <- NULL
```

### n.plasmids outliers

I have fixed this filtering by plasmid length in `features.qmd`

```{r}
data_strain %>% 
  filter(n.plasmids > 20) %>% 
  select(strain, chrom.status, resistance, n.plasmids)
```

# NAs to 0s

```{r}
data_strain[is.na(data_strain)] <- 0
```

# Write the first processed version of the data set to shiny's data directory

```{r}
write.csv(data_strain, file = "EDA_app/data/features_strain.csv", row.names = FALSE)
```

All pre-processing will be done with `recipes`

------------------------------------------------------------------------

# EDA

## Correlation plot

```{r, fig.width=12, fig.height=12, warning=FALSE}
# without resistance
cor_matrix <- data_strain %>% 
  select(-c(strain, resistance, n.beta.lac.3, n.beta.lac.4, chrom.status)) %>%
  cor(use = "pairwise.complete.obs")

corrplot::corrplot(cor_matrix, type = "upper", tl.col = "black", tl.cex = 0.6)
```

We see a lot of correlated features.

## PCA

### ORQ Normalization

ORQ normalization is used here

```{r}
library(bestNormalize)

orq_recipe <- recipe(resistance ~., data = data_strain) %>%
  update_role(strain, new_role = "ID") %>%
  step_nzv(all_predictors()) %>% 
  step_dummy(all_nominal_predictors()) %>% 
  step_orderNorm(all_numeric_predictors()) %>% 
  step_normalize(all_predictors()) 

data_prep <- prep(orq_recipe, retain = TRUE)

# processed data 
data_prep$template
```

```{r, fig.width=12, fig.height=12, warning=FALSE}
# without resistance
cor_matrix_norm <- data_prep$template %>% 
  select(-c(strain, resistance)) %>%
  cor(use = "pairwise.complete.obs")

corrplot::corrplot(cor_matrix_norm, type = "upper", tl.col = "black", tl.cex = 0.6)
```

#### Compare distributions

Choose the variable of interest in the function below or check the **shiny app** out!

```{r}
library(patchwork)

comp_plots <- function(col_name){
  p_orig <- 
  data_strain %>% 
  ggplot(aes_string(x = col_name)) + 
  geom_histogram(bins = 30, color = "white", fill = "blue", alpha = 1/3) + 
  ggtitle(paste0("Original data (", col_name, ")"))
  
  p_norm <- 
  data_prep$template %>% 
  ggplot(aes_string(x = col_name)) + 
  geom_histogram(bins = 30, color = "white", fill = "red", alpha = 1/3) + 
  ggtitle(paste0("Processed data (", col_name, ")"))
  
  return(list(p_orig, p_norm))
}

plots <- comp_plots("min.dist.oriC")
```

```{r, fig.width = 10, fig.height=5}
(plots[[1]] | plots[[2]])
```

If the original distribution is very skewed then normalization doesn't help much.

```{r}
library(ggforce)

plot_validation_results <- function(dat) {
  dat %>%
    select(-strain) %>% 
    # Create the scatterplot matrix
    ggplot(aes(x = .panel_x, y = .panel_y, color = resistance, fill = resistance)) +
    geom_point(alpha = 0.4, size = 1) +
    geom_autodensity(alpha = .3) +
    facet_matrix(vars(-resistance), layer.diag = 2) + 
    scale_color_brewer(palette = "Set1") + 
    scale_fill_brewer(palette = "Set1")
}
```


### Yeo-Johnson transformation

```{r}
yj_recipe <- recipe(resistance ~ ., data = data_strain) %>%
  update_role(strain, new_role = "ID") %>% 
  step_nzv(all_predictors()) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_YeoJohnson(all_numeric_predictors()) %>% 
  step_normalize(all_numeric_predictors())
```


#### Check the distributions

```{r}
data_prep <- prep(yj_recipe, retain = TRUE)

plots <- comp_plots("min.dist.oriC")
```

```{r, fig.width = 12, fig.height=5}
(plots[[1]] | plots[[2]])
```

**NB**: Yeo-Johnson transformation works comparable or worse than ORQ normalization

### PCA plot

based on recipe with ORQ normalization

```{r, fig.width=12, fig.height=12}
pca_rec <- orq_recipe %>%
  step_pca(all_numeric_predictors(), num_comp = 8)

data_pca <- prep(pca_rec, retain = TRUE)

data_pca$template %>% 
  plot_validation_results() + 
  ggtitle("Principal Component Analysis (HR12)")
```

#### 3D version

```{r}
library(plotly)

pca3d <- plot_ly(data_pca$template, 
                 x = ~PC1, 
                 y = ~PC2, 
                 z = ~PC3, 
                 color = ~data_pca$template$resistance, 
                 colors = c('#cf280c', '#1b56f7')) 

pca3d <- pca3d %>% 
  add_markers(size = 2,
              text = ~data_pca$template$strain)

pca3d <- pca3d %>% 
  layout(scene = list(xaxis = list(title = 'PC1'),
                      yaxis = list(title = 'PC2'),
                      zaxis = list(title = 'PC3'))) 

pca3d
```

### Explained variance percentage

```{r}
# find the step number corresponding to PCA, here it's 5
sdev <- data_pca$steps[[5]]$res$sdev
percent_variation <- sdev^2 / sum(sdev^2)

var_df <- data.frame(PC = paste0("PC", 1:length(sdev)),
                     var_explained = percent_variation,
                     stringsAsFactors = FALSE)

var_df <- var_df %>% 
  mutate(var_cum_sum = cumsum(var_explained))

var_df
```

Plot

```{r, fig.width=12, fig.height=6}
var_df %>%
  mutate(PC = forcats::fct_inorder(PC)) %>%
  ggplot(aes(x = PC, y = var_explained)) + 
  geom_col(aes(fill = var_cum_sum)) +
  theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) +
  scale_fill_continuous(type = "viridis")
```

### Top loadings

```{r, message=FALSE, warning=FALSE, fig.width=8, fig.height=6}
# install.packages("devtools")
# devtools::install_github("tidymodels/learntidymodels")
library(learntidymodels)

data_pca %>%
  plot_top_loadings(component_number <= 4, n = 5) + 
  scale_fill_brewer(palette = "Paired") +
  ggtitle("Principal Component Analysis")
```

## PLS - Partial Least Squares

```{r, message=FALSE, warning=FALSE, fig.width=12, fig.height=12}
# BiocManager::install("mixOmics")

pls_rec <- data_rec %>%
  step_pls(all_numeric_predictors(), outcome = "resistance", num_comp = 8)

data_pls <- prep(pls_rec, retain = TRUE)

data_pls$template %>% 
  plot_validation_results() + 
  ggtitle("Partial Least Squares")
```

### Top loadings

```{r, message=FALSE, warning=FALSE, fig.width=8, fig.height=6}
data_pls %>%
  plot_top_loadings(component_number <= 4, n = 5, type = "pls") + 
  scale_fill_brewer(palette = "Paired") +
  ggtitle("Partial Least Squares")
```

### 3D version

```{r}
#library(plotly)

pls3d <- plot_ly(data_pls$template, 
                 x = ~PLS1, 
                 y = ~PLS2, 
                 z = ~PLS3, 
                 color = ~data_pls$template$resistance, 
                 colors = c('#cf280c', '#1b56f7')) 

pls3d <- pls3d %>% 
  add_markers(size = 2,
              text = ~data_pls$template$strain)

pls3d <- pls3d %>% 
  layout(scene = list(xaxis = list(title = 'PLS1'),
                      yaxis = list(title = 'PLS2'),
                      zaxis = list(title = 'PLS3'))) 

pls3d
```

## ICA - Independent Component Analysis

```{r, message=FALSE, warning=FALSE, fig.width=12, fig.height=12}
## ICA
#install.packages("fastICA")
ica_rec <- data_rec %>%
  step_ica(all_numeric_predictors(), num_comp = 8)

data_ica <- prep(ica_rec, retain = TRUE)

data_ica$template %>% 
  plot_validation_results() + 
  ggtitle("Independent Component Analysis")
```

#### 3D version

```{r}
#library(plotly)

ica3d <- plot_ly(data_ica$template, 
                 x = ~IC1, 
                 y = ~IC2, 
                 z = ~IC3, 
                 color = ~data_ica$template$resistance, 
                 colors = c('#cf280c', '#1b56f7')) 

ica3d <- ica3d %>% 
  add_markers(size = 2,
              text = ~data_ica$template$strain)

ica3d <- ica3d %>% 
  layout(scene = list(xaxis = list(title = 'IC1'),
                      yaxis = list(title = 'IC2'),
                      zaxis = list(title = 'IC3'))) 

ica3d
```

## UMAP - uniform manifold approximation and projection

> while high values will push UMAP towards representing the big-picture structure while losing fine detail.

### Unsupervised

```{r, message=FALSE, warning=FALSE, fig.width=12, fig.height=12}
## UMAP
library(embed)

umap_rec <- data_rec %>%
  step_umap(all_numeric_predictors(), num_comp = 8) 

data_umap <- prep(umap_rec, retain = TRUE)

data_umap$template %>% 
  plot_validation_results() +
  ggtitle("UMAP")
```

### UMAP supervised

```{r, message=FALSE, warning=FALSE, fig.width=12, fig.height=12}
## UMAP Supervised

umap_rec_sup <- data_rec %>%
  step_umap(all_numeric_predictors(), outcome = "resistance", num_comp = 8, min_dist = 0.1, neighbors = 25)

data_umap_sup <- prep(umap_rec_sup, retain = TRUE)

data_umap_sup$template %>% 
  plot_validation_results() +
  ggtitle("Supervised UMAP (HR12)")
```

Supervised UMAP look really promising. HR clusters are more compact and some of them are more distant from non-HR ones.

#### 3D version

```{r}
#library(plotly)

umap3d <-
  plot_ly(
    data_umap_sup$template,
    x = ~ UMAP1,
    y = ~ UMAP2,
    z = ~ UMAP3,
    color = ~ data_umap_sup$template$resistance,
    colors = c('#cf280c', '#1b56f7')
  )

umap3d <- umap3d %>% 
  add_markers(size = 2, text = ~ data_umap_sup$template$strain)

umap3d <- umap3d %>% 
  layout(scene = list(
    xaxis = list(title = 'UMAP1'),
    yaxis = list(title = 'UMAP2'),
    zaxis = list(title = 'UMAP3')
))

umap3d

```

### On 'captured variance'

The [answer](https://github.com/lmcinnes/umap/issues/122) of Leland McInnes himself:

> As a non-linear manifold learning technique that ultimately works with metric spaces at its heart rather than feature based data UMAP doesn't really have a notion of explained variance the way algorithms like PCA do. A colleague is working on developing some alternative measures of how well an embedding has performed, but that is still preliminary work and we don't have any published code for that yet -- ultimately UMAP remains a research project with additional features and utilities still being developed.

### write UMAP results to a file

```{r}
write.csv(data_umap_sup$template, "data/umap_hr12.csv", row.names = FALSE)
```

## RG counts distribution

### In strains tested for AMP

```{r}
rg_n_genes <- data %>% 
  select(strain, record_id) %>% 
  distinct() %>% 
  group_by(strain) %>% 
  count()

ggplot(rg_n_genes, aes(n)) + 
  geom_histogram(fill = "steelblue", binwidth = 1) +
  xlab("RG count") +
  ylab("Strains count")


```

```{r}
summary(rg_n_genes$n)
```

Same number as in the total data set.

### In strains with beta-lactamases genes only

```{r}
betaL_n_genes <- data %>% 
  filter(grepl("beta-lactamase", AMR.Gene.Family)) %>% 
  select(strain, record_id) %>% 
  distinct() %>% 
  group_by(strain) %>% 
  count()

ggplot(betaL_n_genes, aes(n)) + 
  geom_histogram(fill="steelblue", binwidth = 1)+
  xlab("BL count")+
  ylab("Strains count")

```

```{r}
summary(betaL_n_genes$n)
```

Every strain has at least one beta-lactamase gene.

## Gene presence

This supposed to be the main predictor of HR

### Number of beta-lactamases

#### Bar plot

because number of BL genes is count data.

```{r}
#data_strain$resistance <- factor()

ggplot(data_strain, aes(n.beta.lac)) +
  geom_bar(aes(fill = resistance), position = "dodge") +
  scale_fill_brewer(palette = "Set1") +
  xlab("n beta-lactamases") +
  ylab("n strains") +
  theme(legend.title = element_blank()) +
  scale_x_continuous(breaks = c(1,2,3,4,5,6))
```

#### Proportion

```{r}
#data_strain$resistance <- factor()

ggplot(data_strain, aes(n.beta.lac)) +
  geom_bar(aes(fill = resistance), position = "fill") +
  scale_fill_brewer(palette = "Set1") +
  xlab("n beta-lactamases") +
  ylab("proportion") +
  theme(legend.title = element_blank()) +
  scale_x_continuous(breaks = c(1,2,3,4,5,6))
```

**OBS!**

1.  If number of BL-genes is higher than 3, the strain is more likely to be HR

2.  There are `r nrow(data_strain %>% filter(n.beta.lac == 1, resistance == "HR"))` HR strain with only 1 beta-lactamase (which is *ampC*)

#### Proportion bar-plot

```{r}
ggplot(data_strain, aes(n.beta.lac.3)) +
  geom_bar(aes(fill = resistance), position = "fill") +
  scale_fill_brewer(palette = "Set1") +
  xlab("N beta-lact > 3") +
  ylab("proportion of strains") +
  scale_x_discrete(breaks = c(0,1))+
  theme(legend.title = element_blank())
  
```

When the number of BL genes is less or equal 3, most likely the strains is non-HR

When number of BL genes is greater than 3, quite likely that the strain is HR or R

```{r}
ggplot(data_strain, aes(n.beta.lac.4)) +
  geom_bar(aes(fill = resistance), position = "fill") +
  scale_fill_brewer(palette="Set1") +
  xlab("N beta-lact > 4") +
  ylab("proportion of strains") +
  scale_x_discrete(breaks = c(0, 1), labels = c("no" = "No", "yes" = "Yes"))+
  theme(legend.title=element_blank())
```

Now the chance of being HR is higher than the chance of being nonHR

### Beta-lactamases on plasmids and chromosome

Variable `n.genes.plasmids` means number of **beta-lactamases** on plasmids (it was renamed).

Let's check this.

It should always be less or equal than `n.beta.lac`.

How many strains in our data set `n.beta.lac` greater or equal `n.beta.lac.plasmid`: `r sum(data_strain$n.beta.lac >= data_strain$n.beta.lac.plasmid)`

How many strains in total: `r nrow(data_strain)`

These numbers must be equal.

#### Number of beta-lact on plasmids

```{r}
ggplot(data_strain, aes(n.beta.lac.plasmid)) +
  geom_bar(aes(fill = resistance), position = "dodge", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  scale_x_continuous(breaks = c(0,1,2,3,4,5)) +
  xlab("n beta-lactamases on plasmids") +
  ylab("n strains")
```

Starting from 4 bl genes (on plasmids), it seems to be a very good predictor

#### Number of beta-lact on chrom

Classic bar plot

```{r}
ggplot(data_strain, aes(n.beta.lac.chrom)) +
  geom_bar(aes(fill = resistance), position = "dodge", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  scale_x_continuous(breaks = c(0,1,2,3,4,5)) +
  xlab("n beta-lactamases on chromosome") +
  ylab("n strains")
```

As proportion:

```{r}
ggplot(data_strain, aes(n.beta.lac.chrom)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  scale_x_continuous(breaks = c(0,1,2,3,4,5)) +
  xlab("n beta-lactamases on chromosome") +
  ylab("proportion")
```

#### Proportion bar plot

```{r}
n_bl_loc <- data_strain %>% 
  select(resistance, n.beta.lac.plasmid, n.beta.lac.chrom) %>% 
  gather("loc", "N", 2:3) %>% 
  filter(N > 0)

bl_loc_sum <- n_bl_loc %>% 
  group_by(resistance, loc) %>% 
  summarise(sum.n = sum(N))

ggplot(bl_loc_sum, aes(loc, sum.n)) +
  geom_col(aes(fill = resistance), position = "fill") +
  scale_fill_brewer(palette = "Set1") +
  xlab("") +
  ylab("proportion") +
  scale_x_discrete(labels = c("on chromosome", "on plasmids")) +
  theme(legend.title = element_blank())
```

If a strain has BL genes on chromosome only it's more likely to be non-HR than HR

### Beta-lactamases on plus strand

#### Total

```{r}
ggplot(data_strain, aes(n.beta.lac.plus)) +
  geom_bar(aes(fill = resistance), position = "dodge", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("n beta-lactamases on plus strand") +
  ylab("n strains") 
```

As proportion

```{r}
ggplot(data_strain, aes(n.beta.lac.plus)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("n beta-lactamases on plus strand") +
  ylab("proportion") 
```

#### On plasmids

```{r}
ggplot(data_strain, aes(n.beta.lac.plus.plasmid)) +
  geom_bar(aes(fill = resistance), position = "dodge", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("n beta-lactamases on plus strand on plasmids") +
  ylab("n strains") 
```

As proportion:

```{r}
ggplot(data_strain, aes(n.beta.lac.plus.plasmid)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("n beta-lactamases on plus strand on plasmids") +
  ylab("proportion") 
```

#### On chromosomes

```{r}
ggplot(data_strain, aes(n.beta.lac.plus.chrom)) +
  geom_bar(aes(fill = resistance), position = "dodge", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("n beta-lactamases on plus strand on chromosome") +
  ylab("n strains") 
```

As proportion

```{r}
ggplot(data_strain, aes(n.beta.lac.plus.chrom)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("n beta-lactamases on plus strand on chromosome") +
  ylab("proportion") 
```

### ampC and non-ampC beta-lactamases

```{r}
bl_type_count <- data_strain %>% 
  select(resistance, n.beta.lac, ampC.type.beta.lactamase) %>% 
  mutate(non.ampC = n.beta.lac - ampC.type.beta.lactamase) %>% 
  select(-n.beta.lac)

bl_type_count_tidy <- gather(bl_type_count, key = "gene", value = "n", 2:3) %>% 
  group_by(resistance, gene) %>% 
  summarize(sum=sum(n))


ggplot(bl_type_count_tidy, aes(gene, sum))+
  geom_col(aes(fill=resistance), position = "fill", alpha = 1) + 
  # scale_fill_viridis_d(option = "inferno", begin = 0.2, end = 0.7) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("") +
  ylab("proportion")+
  scale_x_discrete(labels = c("ampC", "non-ampC"))
  
```

Among strains having only ampC beta-lactamases, the majority is non-HR

Among strains having non-ampC beta-lactamases majority is HR

### ampC bar plot

```{r}
ggplot(data_strain, aes(ampC.type.beta.lactamase)) +
  geom_bar(aes(fill = resistance), position = "dodge", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("n ampC beta-lactamases") +
  ylab("n strains") 
```

As proportion:

```{r}
ggplot(data_strain, aes(ampC.type.beta.lactamase)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("n ampC beta-lactamases") +
  ylab("proportoion") 
```

### non-ampC bar plot

```{r}
ggplot(bl_type_count, aes(non.ampC)) +
  geom_bar(aes(fill = resistance), position = "dodge", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("n non-ampC beta-lactamases") +
  ylab("n strains") 
```

As proportion

```{r}
ggplot(bl_type_count, aes(non.ampC)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("n non-ampC beta-lactamases") +
  ylab("proportion") 
```

## TEM beta-lactamase

```{r}
ggplot(data_strain, aes(TEM.beta.lactamase)) +
  geom_bar(aes(fill = resistance), position = "dodge", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("TEM beta-lactamase") +
  ylab("n strains") 
```

As proportion:

```{r}
ggplot(data_strain, aes(TEM.beta.lactamase)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("TEM beta-lactamase") +
  ylab("proportion")
```

## Beta-lactamases heatmap

### AMR types in each strain

highlight BLs somehow!

```{r, fig.width=20, fig.height=6}
# This section is repeated in feature_engineering.Rmd

# get unique AMR types
amr_types <- unique(data$AMR.Gene.Family)

# get unique gene rows with AMR.Gene.Family
bl_amr_gene_types <- data %>% select(strain, record_id, AMR.Gene.Family) %>% distinct()

# make a DF of each AMR type counts in each gene
bl_blr_gene_presence <- as_tibble(
  as.data.frame(
    map(amr_types, function(x) ifelse(grepl(x, bl_amr_gene_types$AMR.Gene.Family, fixed = T), 1, 0)),
    col.names = amr_types))

# add strain and summarize counts
bl_blr_gene_presence$strain <- bl_amr_gene_types$strain
bl_blr_gene_presence <- relocate(bl_blr_gene_presence, strain, .before = "ampC.type.beta.lactamase")
# here sum is applied to all variables
bl_amr_types_strain <- bl_blr_gene_presence %>% group_by(strain) %>% summarise_each(~sum(.))
# we need shorter names
#names(bl_amr_types_strain) <- c("strain", "ampC", "DFR", "APH6", "APH3.1", "SUL", "TEM", "SAT", "ANT3", "MPH", "APH3.2", "CTX.M", "CAT", "AAC3", "OXA", "AAC6", "ANT2", "FTT", "SHV", "TR.RPP", "APH4", "QNR")

# make tidy for ggplot
bl_amr_types_strain_td <- gather(bl_amr_types_strain, key = "AMR.type", value = "N", 2:22)

# make a plot
ggplot(bl_amr_types_strain_td, aes(strain, AMR.type))+geom_tile(aes(fill=N))+
  theme(axis.text.x = element_text(angle = 45, vjust = 0.2, hjust=1, size = 3))+
  xlab("")+
  scale_fill_gradient2(high="blue")
```

*ampC* is present in every strain

#### Interactive version

```{r, eval=F, fig.width=12}
library(plotly)

vals <- scales::rescale(c(0:6))
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Blues", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
fig <- plot_ly(z = bl_amr_types_strain_td$N, 
               x = bl_amr_types_strain_td$strain, 
               y = bl_amr_types_strain_td$AMR.type, 
               type = "heatmap", 
               colorscale = colz)
fig
```

## Coverage

```{r}
data_strain %>% 
    ggplot(aes(resistance, coverage)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(
    aes(fill = resistance),
    alpha = 0.2,
    notch = F,
    varwidth = T
  ) +
  geom_jitter(alpha = 0.2,
              width = 0.15,
              height = 0.1) +
  scale_fill_brewer(palette = "Set1") +
  ggtitle("") +
  ylab("n") +
  xlab("") +
  guides(fill = "none")
```

## Sequencing reads lengths

```{r}
data_strain %>% 
    ggplot(aes(resistance, read.max.len)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(
    aes(fill = resistance),
    alpha = 0.2,
    notch = F,
    varwidth = T
  ) +
  geom_jitter(alpha = 0.2,
              width = 0.15,
              height = 0.1) +
  scale_fill_brewer(palette = "Set1") +
  ggtitle("") +
  ylab("n") +
  xlab("") +
  guides(fill = "none")
```

## Number of plasmids

Per strain, doesn't depend on beta-lactamase presence or absence

### Box plot

```{r}
data_strain %>%
  ggplot(aes(resistance, n.plasmids)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(
    aes(fill = resistance),
    alpha = 0.2,
    notch = F,
    varwidth = T
  ) +
  geom_jitter(alpha = 0.2,
              width = 0.15,
              height = 0.1) +
  scale_fill_brewer(palette = "Set1") +
  ggtitle("") +
  ylab("n") +
  xlab("") +
  guides(fill = "none")
```

Without outliers (bad assemblies)

```{r}
data_strain %>% filter(n.plasmids < 50) %>%
  ggplot(aes(resistance, n.plasmids)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(
    aes(fill = resistance),
    alpha = 0.2,
    notch = F,
    varwidth = T
  ) +
  geom_jitter(alpha = 0.2,
              width = 0.15,
              height = 0.1) +
  scale_fill_brewer(palette = "Set1") +
  ggtitle("") +
  ylab("n") +
  xlab("") +
  guides(fill = "none")
```

### Bar plot - filtered version

```{r}
data_strain %>% filter(n.plasmids < 50) %>% 
  ggplot(aes(n.plasmids)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "")+
  xlab("n plasmids") +
  ylab("n strains")
```

## Median total repeat length

```{r}
med_rep_len <- data_strain %>% 
  select(resistance, med.tot.rep.len.chrom, med.tot.rep.len.plasmid, med.tot.rep.len) %>% 
  gather("location", "med.len", 2:4)

facet_names <- c("med.tot.rep.len.chrom" = "chromosome",
                 "med.tot.rep.len.plasmid" = "plasmids",
                 "med.tot.rep.len" = "total")

ggplot(med_rep_len %>% filter(med.len > 0), aes(resistance, med.len)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(aes(fill = resistance), alpha = 0.2, notch = F, varwidth = T, outlier.shape = NA) +
  geom_jitter(alpha = 0.2, width = 0.05, height = 0.1, size = 0.8) +
  scale_fill_brewer(palette = "Set1") +
  coord_trans(y = "sqrt") +
  facet_grid(cols = vars(location), labeller = as_labeller(facet_names)) +
  ylab("avg repeat length") +
  xlab("") +
  guides(fill = "none")
```

### Average total

```{r}
ggplot(data_strain %>% filter(med.tot.rep.len > 0), aes(resistance, med.tot.rep.len)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(aes(fill = resistance), alpha = 0.2, notch = F, varwidth = T, outlier.shape = NA) +
  geom_jitter(alpha = 0.2, width = 0.05, height = 0.1, size = 0.8) +
  scale_fill_brewer(palette = "Set1") +
  coord_trans(y = "sqrt") +
  ylab("med repeat length") +
  xlab("") +
  guides(fill = "none")
```

### Average on chromosome

```{r}
ggplot(data_strain %>% filter(med.tot.rep.len.chrom > 0), aes(resistance, med.tot.rep.len.chrom)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(aes(fill = resistance), alpha = 0.2, notch = F, varwidth = T, outlier.shape = NA) +
  geom_jitter(alpha = 0.2, width = 0.05, height = 0.1, size = 0.8) +
  scale_fill_brewer(palette = "Set1") +
  coord_trans(y = "sqrt") +
  ylab("med repeat length") +
  xlab("") +
  guides(fill = "none")
```

### Average on plasmids

```{r}
ggplot(data_strain %>% filter(med.tot.rep.len.plasmid > 0), aes(resistance, med.tot.rep.len.plasmid)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(aes(fill = resistance), alpha = 0.2, notch = F, varwidth = T, outlier.shape = NA) +
  geom_jitter(alpha = 0.2, width = 0.05, height = 0.1, size = 0.8) +
  scale_fill_brewer(palette = "Set1") +
  coord_trans(y = "sqrt") +
  ylab("med repeat length") +
  xlab("") +
  guides(fill = "none")
```

## Median repeat length

```{r}
med_rep_len <- data_strain %>% 
  select(resistance, med.rep.len.chrom, med.rep.len.plasmid, med.rep.len) %>% 
  gather("location", "med.len", 2:4)

med_rep_len$med.len <- if_else(med_rep_len$med.len == 0, 1, med_rep_len$med.len)

facet_names <- c("med.rep.len.chrom" = "chromosome",
                 "med.rep.len.plasmid" = "plasmids",
                 "med.rep.len" = "total")

ggplot(med_rep_len %>% filter(med.len > 0), aes(resistance, med.len)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(aes(fill = resistance), alpha = 0.2, notch = F, varwidth = T, outlier.shape = NA) +
  geom_jitter(alpha = 0.2, width = 0.05, height = 0.1, size = 0.8) +
  scale_fill_brewer(palette = "Set1") +
  coord_trans(y = "sqrt") +
  facet_grid(cols = vars(location), labeller = as_labeller(facet_names)) +
  ylab("median repeat length") +
  xlab("") +
  guides(fill = "none")
```

```{r}
ggplot(med_rep_len %>% filter(location == "med.rep.len.plasmid"), aes(resistance, med.len)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(aes(fill = resistance), alpha = 0.2, notch = F, varwidth = T, outlier.shape = NA) +
  geom_jitter(alpha = 0.2, width = 0.05, height = 0.1, size = 0.8) +
  scale_fill_brewer(palette = "Set1") +
  coord_trans(y = "sqrt") +
  ylab("median repeat length") +
  xlab("") +
  guides(fill = "none")
```

## Maximum repeat length

```{r}
max_rep_len <- data_strain %>% 
  select(resistance, max.rep.len.chrom, max.rep.len.plasmid, max.rep.len) %>% 
  gather("location", "max.len", 2:4)

max_rep_len$max.len <- if_else(max_rep_len$max.len == 0, 1, max_rep_len$max.len)

facet_names <- c("max.rep.len.chrom" = "chromosome",
                 "max.rep.len.plasmid" = "plasmids",
                 "max.rep.len" = "total")

ggplot(max_rep_len, aes(resistance, max.len)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(aes(fill = resistance), alpha = 0.2, notch = F, varwidth = T, outlier.shape = NA) +
  geom_jitter(alpha = 0.2, width = 0.05, height = 0.1, size = 0.8) +
  scale_fill_brewer(palette = "Set1") +
  coord_trans(y = "sqrt") +
  facet_grid(cols = vars(location), labeller = as_labeller(facet_names)) +
  ylab("max repeat length") +
  xlab("") +
  guides(fill = "none")
```

```{r}
ggplot(max_rep_len %>% filter(location == "max.rep.len.plasmid"), aes(resistance, max.len)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(aes(fill = resistance), alpha = 0.2, notch = F, varwidth = T, outlier.shape = NA) +
  geom_jitter(alpha = 0.2, width = 0.05, height = 0.1, size = 0.8) +
  scale_fill_brewer(palette = "Set1") +
  coord_trans(y = "sqrt") +
  ylab("max repeat length") +
  xlab("") +
  guides(fill = "none")
```

## Repeat counts

```{r}
rep_count <- data_strain %>% 
  select(resistance, n.rep.chrom, n.rep.plasmid, n.rep.total) %>% 
  gather("location", "n.rep", 2:4)

rep_count$n.rep <- if_else(rep_count$n.rep == 0, 1, rep_count$n.rep) 

facet_names <- c("n.rep.chrom" = "chromosome",
                 "n.rep.plasmid" = "plasmids",
                 "n.rep.total" = "both")

ggplot(rep_count, aes(resistance, n.rep)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(aes(fill = resistance), alpha = 0.2, notch = F, varwidth = T, outlier.shape = NA) +
  geom_jitter(alpha = 0.2, width = 0.05, height = 0.1, size = 0.8) +
  scale_fill_brewer(palette = "Set1") +
  coord_trans(y = "sqrt") +
  facet_grid(cols = vars(location), labeller = as_labeller(facet_names)) +
  ylab("n repeats") +
  xlab("") +
  guides(fill = "none")
```

```{r}
ggplot(rep_count %>% filter(location == "n.rep.plasmid"), aes(resistance, n.rep)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(aes(fill = resistance), alpha = 0.2, notch = F, varwidth = T, outlier.shape = NA) +
  geom_jitter(alpha = 0.2, width = 0.05, height = 0.1, size = 0.8) +
  scale_fill_brewer(palette = "Set1") +
  coord_trans(y = "sqrt")+
  ylab("n repeats") +
  xlab("") +
  guides(fill = "none")
```

## Amplifiable region size

```{r}
ar_len <- data_strain %>% 
  select(resistance, med.AR.len.chrom, med.AR.len.plasmid, med.AR.len) %>% 
  gather("location", "ar.len", 2:4)

facet_names <- c("med.AR.len.chrom" = "chromosome",
                 "med.AR.len.plasmid" = "plasmids",
                 "med.AR.len" = "both")

ggplot(ar_len %>% filter(ar.len > 0), aes(resistance, ar.len)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(aes(fill = resistance), alpha = 0.2, notch = F, varwidth = T, outlier.shape = NA) +
  geom_jitter(alpha = 0.2, width = 0.05, height = 0.1, size = 0.8) +
  scale_fill_brewer(palette = "Set1") +
  #coord_trans(y = "sqrt") +
  facet_grid(cols = vars(location), labeller = as_labeller(facet_names)) +
  ylab("avg AR length") +
  xlab("") +
  guides(fill = "none")
```

## Distance to oriC

### Min distance on chromnomsome, on plasmids, both

```{r}
min_ori <- data_strain %>% 
  select(resistance, min.dist.oriC.chrom, min.dist.oriC.plasmid, min.dist.oriC) %>% 
  gather("location", "dist", 2:4)

# for plots
min_ori$dist <- if_else(min_ori$dist == 0, 1, min_ori$dist)

facet_names <- c("min.dist.oriC.chrom" = "chromosome",
                 "min.dist.oriC.plasmid" = "plasmids",
                 "min.dist.oriC" = "both")

ggplot(min_ori, aes(resistance, dist)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(aes(fill = resistance), alpha = 0.2, notch = F, varwidth = T, outlier.shape = NA) +
  geom_jitter(alpha = 0.2, width = 0.05, height = 0.1, size = 0.8) +
  scale_fill_brewer(palette = "Set1") +
  coord_trans(y = "sqrt") +
  facet_grid(cols = vars(location), labeller = as_labeller(facet_names)) +
  ylab("min dist oriC") +
  xlab("") +
  guides(fill = "none")
```

```{r}
min_ori %>% 
  filter(location=="min.dist.oriC.plasmid") %>% 
  ggplot(aes(resistance, dist)) +
  geom_violin(aes(fill = resistance), alpha = 0.7) +
  geom_boxplot(aes(fill = resistance), alpha = 0.2, notch = F, varwidth = T, outlier.shape = NA) +
  geom_jitter(alpha = 0.2, width = 0.05, height = 0.1, size = 0.8) +
  scale_fill_brewer(palette = "Set1") +
  coord_trans(y = "sqrt") +
  ylab("min dist oriC") +
  xlab("") +
  guides(fill = "none")
```

### Minimal distance on chromosome, on plasmids, both

```{r}

```

## Number of genes on plus strand

### On chromosome, on plasmids, both

```{r, fig.width=6, fig.height=4}
ggplot(data_strain, aes(n.beta.lac.plus))+
  geom_bar(aes(fill=resistance), position="dodge", alpha=0.8)+
  scale_fill_brewer(palette="Set1")+
  xlab("number of genes")+
  ylab("number of strains")+
  ggtitle("Beta-lactamase genes on plus-strand")
```

## ampC-type beta-lactamases

Statistics based on BL of ampC-type only

### Total repeat count

#### As a box plot

```{r, fig.width=6, fig.height=4}
ggplot(data_strain, aes(resistance, n.rep.total.ampC))+
  geom_violin(aes(fill=resistance), alpha=0.7)+
  geom_boxplot(aes(fill=resistance), alpha=0.2, notch = T, varwidth = T)+
  geom_jitter(alpha=0.2, width=0.15, height = 0.1)+
  scale_fill_brewer(palette = "Set1")+
  ggtitle("ampC-type BL: total repeat count")+
  ylab("N")+
  guides(fill="none")
  
```

#### As distributions

```{r, fig.width=6, fig.height=4}
ggplot(data_strain, aes(n.rep.total.ampC))+
  geom_area(aes(fill=resistance), stat="bin", alpha=0.6)+
  scale_fill_brewer(palette="Set1")+
  ggtitle("ampC-type BL: total repeat count distribution")+
  xlab("number of repeats")+
  ylab("number of strains")
```

### Median repeat length

```{r, fig.width=6, fig.height=4}
ggplot(data_strain %>% filter(med.rep.len.ampC > 0), aes(resistance, med.rep.len.ampC))+
  geom_violin(aes(fill=resistance), alpha=0.7)+
  geom_boxplot(aes(fill=resistance), alpha=0.2, notch = F, varwidth = T)+
  geom_jitter(alpha=0.2, width=0.15, height = 0.1)+
  scale_fill_brewer(palette = "Set1")+
  coord_trans(y="sqrt") +
  ggtitle("ampC-type BL: median repeat length")+
  ylab("length")+
  guides(fill="none")
```

### Median AR size

```{r}
ggplot(data_strain %>% filter(med.AR.len.ampC > 0), aes(resistance, med.AR.len.ampC))+
  geom_violin(aes(fill=resistance), alpha=0.7)+
  geom_boxplot(aes(fill=resistance), alpha=0.2, notch = T, varwidth = T)+
  geom_jitter(alpha=0.2, width=0.15, height = 0.1)+
  scale_fill_brewer(palette = "Set1")+
  coord_trans(y="sqrt") +
  ggtitle("ampC-type BL: median AR size")+
  ylab("AR size")+
  guides(fill="none")

```
