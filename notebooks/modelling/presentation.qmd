---
title: "Predicting the unstable heteroresistance from genomic data"
author: "Andrei Guliaev"
format: 
  revealjs:
    logo: figs/UU_logo_color.png
    css: figs/logo.css
    theme: default
    slide-number: true
    show-slide-number: all
editor: source
---

## Definition

::: {.r-fit-text}

>Heteroresistance (HR) is the presence of a heterogeneous population of bacteria with one subpopulation or several subpopulations that exhibit increased levels of antibiotic resistance compared with the main population

-   8-fold above resistance level of main population

-   1.E-07 frequency of resistant population

![](figs/resistance.png){.absolute bottom="250" right="50" width="284" height="200"} 

![](figs/levels_of_resistance.png){.absolute bottom="20" left="10" width="356" height="260"}

![](figs/frequence_of_resistance.png){.absolute bottom="20" right="400" width="218" height="260"}

::: 

## Types of HR

::: {.r-fit-text}

-   **monoclonal**: HR present in pure clones

-   **polyclonal**: mixed infections or rare resistant mutants

![](figs/polyclonal_hr.png){.absolute bottom="50" left="100" width="750" height="300"}

:::

## Types of HR

::: {.r-fit-text}

-   **stable**: if resistance of the subpopulation does not decrease or revert to susceptibility following growth in the absence of antibiotics

-   **unstable**: if the resistance of the subpopulation decreases or reverts to susceptibility following growth in the absence of antibiotics

![](figs/unstable_HR.png){.absolute bottom="20" left="250" width="492" height="400"}

:::

## Mechanisms of ustable HR

::: {.r-fit-text}

- The most common (in G- bacteria): spontaneous amplifications of regions containing resistance genes (RG)

- Amplifications can quickly disappear without presence of AB unlike pint mutations or indels

![](figs/gene_amplification_scheme.png){.absolute bottom="10" left="250" width="540" height="400"}

:::

## Mechanisms of ustable HR

Amplifications are caused by:

::: {.r-fit-text}

- Homologous recombination if duplicated region is surrounded by extensive (>100 bp) direct sequence repeats (DR)

- Insertion sequences (IS)

- Very short DR (~10 bp)

![](figs/amplification_mechanisms.png){.absolute bottom="0" left="250" width="554" height="366"}

:::

##

Our aim is to demonstrate that machine learning can predict unstable HR from genomic data

![](figs/analysis_scheme.png){.absolute bottom="0" left="150" width="741" height="390"}

## Methods

::: columns
::: {.column width="20%"}
![](figs/petri_dish_experimentation_biology_education_petri_dish_icon_143934.png){.absolute width="80" left="50"}
![](figs/sequencing-icon.png){.absolute width="75" left="64" bottom="410"}
![](figs/snakemake_logo.png){.absolute width="80" left="60" bottom="310"}

![](figs/laptop.png){.absolute width="80" left="60" bottom="210"}

![](figs/robot.png){.absolute width="80" left="60" bottom="100"}
:::

::: {.column width="80%"}
500 *E.coli* strains tested for HR to Piperacillin-Tazobactam

WGS using both Nanopore and Illumina

A computational pipeline for assembling genomes, annotating RG, DR and IS

Creating predictors (avg. repeat length, RG count, IS count etc.)

Creating a model that can distinguish HR and nonHR strains (supervised ML)
:::
:::

## Predictors (a.k.a. Features) {.smaller}

::: {.incremental}

- RG count (especially beta-lactamases)
- RG types
- mean length of DR
- maximum length of DR
- mean number of IS
- mean length of IS
- location on plasmids or chromosomes
- distance to *ori*C
- length of amplifiable region (AR)
- plasmids count
- *coverage*
- *the longest Nanopore read length*
:::

## HR testing

::: {.incremental}

- HR (groups I + II): 81 strains

- nonHR: 393 strains

- pure resistance: 13 strains

:::

## Genome completeness

```{r}
library(tidymodels)

### READ DATA
data_strain <- readr::read_csv("data/features_strain.csv", na = c("NA", "-Inf"), show_col_types = F)

## READ TESTING
hr_testing12 <- readr::read_csv("data/heteroresistance_testing.csv", col_select = c(strain, Gr12), show_col_types = F) %>% 
  filter(!is.na(strain)) %>% 
  rename("resistance" = Gr12 )

data_strain <- data_strain %>% 
  left_join(hr_testing12, by = "strain")

data_strain <- data_strain %>% 
  mutate(n.beta.lac.3 = factor(ifelse(n.beta.lac > 3, "yes", "no"))) %>% 
  mutate(n.beta.lac.4 = factor(ifelse(n.beta.lac > 4, "yes", "no"))) %>% 
  relocate(n.beta.lac.3, n.beta.lac.4, .before = "n.plasmids") %>% 
  filter(resistance != "R") %>% 
  mutate(resistance = factor(resistance, levels = c("HR", "nonHR")),
         chrom.status = factor(chrom.status))

data_strain$N50 <- NULL
data_strain$NA. <- NULL
data_strain[is.na(data_strain)] <- 0

data_strain <-
  data_strain %>% rename(SLF = sulfonamide.resistant.sul, 
                         TMP.DFR = trimethoprim.resistant.dihydrofolate.reductase.dfr,
                         MPH = macrolide.phosphotransferase..MPH.,
                         CTX.M.bl = CTX.M.beta.lactamase,
                         ampC.bl = ampC.type.beta.lactamase,
                         CAT = chloramphenicol.acetyltransferase..CAT.,
                         OXA.bl = OXA.beta.lactamase,
                         AAC.6 = AAC.6...Ib.cr,
                         SAT = streptothricin.acetyltransferase..SAT.,
                         SHV.bl = SHV.beta.lactamase,
                         TTC.rpp = tetracycline.resistant.ribosomal.protection.protein,
                         FTT = fosfomycin.thiol.transferase,
                         QNR = quinolone.resistance.protein..qnr.,
                         DHA.bl = DHA.beta.lactamase)

## PLOT
data_strain %>% 
  group_by(resistance, chrom.status) %>% 
  count() %>% 
  ggplot(aes(chrom.status, n)) +
  geom_col(position = "dodge") + 
  facet_grid(cols = vars(resistance)) +
  xlab("")
```

## HR v S

### Beta-lactamase genes

```{r}
ggplot(data_strain, aes(n.beta.lac)) +
  geom_bar(aes(fill = resistance), position = "fill") +
  scale_fill_brewer(palette="Set1") +
  xlab("N") +
  ylab("proportion") +
  theme(legend.title = element_blank()) +
  scale_x_continuous(breaks = c(1,2,3,4,5,6))
```

## If N beta-lactamases > 3

```{r}
ggplot(data_strain, aes(n.beta.lac.4)) +
  geom_bar(aes(fill = resistance), position = "fill") +
  scale_fill_brewer(palette="Set1") +
  xlab("N > 3") +
  ylab("proportion of strains") +
  scale_x_discrete(breaks = c(0, 1), labels = c("no" = "No", "yes" = "Yes"))+
  theme(legend.title=element_blank())
```

## Beta-lactamases on plasmids

```{r}
ggplot(data_strain, aes(n.beta.lac.plasmid)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  scale_x_continuous(breaks = c(0,1,2,3,4,5)) +
  xlab("n beta-lactamases on plasmids") +
  ylab("n strains")
```

## ampC beta-lac

```{r}
bl_type_count <- data_strain %>% 
  select(resistance, n.beta.lac, ampC.bl) %>% 
  mutate(non.ampC = n.beta.lac - ampC.bl) %>% 
  select(-n.beta.lac)

bl_type_count_tidy <- gather(bl_type_count, key = "gene", value = "n", 2:3) %>% 
  group_by(resistance, gene) %>% 
  summarize(sum=sum(n))


ggplot(bl_type_count_tidy, aes(gene, sum))+
  geom_col(aes(fill=resistance), position = "fill", alpha = 1) + 
  # scale_fill_viridis_d(option = "inferno", begin = 0.2, end = 0.7) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("") +
  ylab("proportion")+
  scale_x_discrete(labels = c("ampC", "non-ampC"))
  
```

## TEM beta-lac

```{r}
ggplot(data_strain, aes(TEM.beta.lactamase)) +
  geom_bar(aes(fill = resistance), position = "fill", alpha = 1) +
  scale_fill_brewer(palette = "Set1", name = "") +
  xlab("TEM beta-lactamase") +
  ylab("proportion")
```

## Heatmap

```{r}
library(plotly)

data <- readr::read_csv("data/features.csv", show_col_types = FALSE) %>% 
  select(-c(repeat_length, total_repeat_length, AR_length, spans_center, n.repeats.gene, n_repeats_gene_min100, n_repeats_gene_min500)) %>% 
  distinct()

amr_types <- unique(data$AMR.Gene.Family)

# get unique gene rows with AMR.Gene.Family
bl_amr_gene_types <- data %>% select(strain, record_id, AMR.Gene.Family) %>% distinct()

# make a DF of each AMR type counts in each gene
bl_blr_gene_presence <- as_tibble(
  as.data.frame(
    map(amr_types, function(x) ifelse(grepl(x, bl_amr_gene_types$AMR.Gene.Family, fixed = T), 1, 0)),
    col.names = amr_types))

# add strain and summarize counts
bl_blr_gene_presence$strain <- bl_amr_gene_types$strain
bl_blr_gene_presence <- relocate(bl_blr_gene_presence, strain, .before = "ampC.type.beta.lactamase")
# here sum is applied to all variables
bl_amr_types_strain <- bl_blr_gene_presence %>% group_by(strain) %>% summarise_each(~sum(.))
# we need shorter names
#names(bl_amr_types_strain) <- c("strain", "ampC", "DFR", "APH6", "APH3.1", "SUL", "TEM", "SAT", "ANT3", "MPH", "APH3.2", "CTX.M", "CAT", "AAC3", "OXA", "AAC6", "ANT2", "FTT", "SHV", "TR.RPP", "APH4", "QNR")

# make tidy for ggplot
bl_amr_types_strain_td <- gather(bl_amr_types_strain, key = "AMR.type", value = "N", 2:22)

# plotly heatmap
vals <- scales::rescale(c(0:6))
o <- order(vals, decreasing = FALSE)
cols <- scales::col_numeric("Blues", domain = NULL)(vals)
colz <- setNames(data.frame(vals[o], cols[o]), NULL)
fig <- plot_ly(z = bl_amr_types_strain_td$N, 
               x = bl_amr_types_strain_td$strain, 
               y = bl_amr_types_strain_td$AMR.type, 
               type = "heatmap", 
               colorscale = colz)
fig
```


## Correlatied features

```{r, out.height='200%'}
#| label: figure
# without resistance
cor_matrix <- data_strain %>%
  select(-c(
    strain,
    resistance,
    n.beta.lac.3,
    n.beta.lac.4,
    chrom.status,
    contains(c("APH", "ANT", "PH", "CAT", "AAC", "SAT", "DHA", "QNR"), ignore.case = FALSE)
  )) %>%
  cor(use = "pairwise.complete.obs", method = "spearman")

corrplot::corrplot(cor_matrix, type = "upper", tl.col = "black", tl.cex = 0.5 )
```



