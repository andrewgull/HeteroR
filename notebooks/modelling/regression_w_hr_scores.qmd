---
title: "Regression with HR scores"
author: "AG"
format: html
editor: source
---

```{r}
library(tidyverse)
library(tidymodels)
library(bonsai)
library(bestNormalize)
```

## Read the testing data

```{r}
testing_results <-
  read_csv(
    "data/heteroresistance_testing_scores.csv",
    col_names = FALSE,
    show_col_types = F
  ) %>%
  filter(!is.na(X1),
         !grepl("Exclu", X2),
         X2 != "R") %>% 
  rename("strain" = X1,
          "resistance" = X2,
          "replicate_1" = X3,
          "replicate_2" = X4,
          "replicate_3" = X5)

testing_results
```

What does it all mean?

'1' is category 1, should be score 4
'2' is category 2, should be score 2
'-' is categories 3 and 4, should be score 1
' ' is no PAP, should be score 0

Then I can sum up the scores across all replicates and get a continuous representation of HR/nonHR classes.

## Assign HR scores

```{r}
testing_results <- testing_results %>%
  mutate(
    replicate_1_score = case_when(
      replicate_1 == "1" ~ 4,
      replicate_1 == "2" ~ 3,
      replicate_1 == "-" ~ 2,
      is.na(replicate_1) ~ 1,
      grepl("?", replicate_1) ~ 0
    ),
    replicate_2_score = case_when(
      replicate_2 == "1" ~ 4,
      replicate_2 == "2" ~ 3,
      replicate_2 == "-" ~ 2,
      is.na(replicate_2) ~ 1,
      grepl("?", replicate_2) ~ 0
    ),
    replicate_3_score = case_when(
      replicate_3 == "1" ~ 4,
      replicate_3 == "2" ~ 3,
      replicate_3 == "-" ~ 2,
      is.na(replicate_3) ~ 1,
      grepl("?", replicate_2) ~ 0
    )
  ) %>%
  mutate(total_score = replicate_1_score + replicate_2_score + replicate_3_score)

testing_results %>% select(resistance, total_score)
```

```{r}
testing_results %>%
  ggplot(aes(total_score)) +
  geom_histogram()
```

### Plot scores in HR and nonHR

```{r}
testing_results %>% 
  ggplot(aes(resistance, total_score)) +
  geom_violin() +
  geom_boxplot(alpha=0.2)
```

## Quick modelling

```{r}
data_strain <- readr::read_csv("data/features_strain.csv",
                               na = c("NA", "-Inf"),
                               show_col_types = FALSE)

hr_testing <- testing_results %>% select(strain, total_score)

data_strain <- data_strain %>%
  left_join(hr_testing, by = "strain")

data_strain <- data_strain %>%
  mutate(n.beta.lac.4 = factor(ifelse(n.beta.lac > 4, "yes", "no"))) %>%
  relocate(n.beta.lac.4, .before = "n.plasmids") %>%
  filter(strain != "DA63310") %>%
  mutate(chrom.status = factor(chrom.status))

data_strain$N50 <- NULL
data_strain[is.na(data_strain)] <- 0
data_strain <- data_strain %>% 
  select(-contains("oriC")) %>% 
  select(-contains("plus"))

# same seed number as in modelling.Rmd
set.seed(124)

# SPLIT & FOLDS
data_split <- initial_split(data_strain,
                            prop = 0.8)

df_train <- training(data_split)
df_test <- testing(data_split)

cv_folds <- vfold_cv(df_train,
                     v = 10,
                     repeats = 5)

# metrics for imbalanced classes
reg_metrics <- metric_set(mae, rmse, rsq, ccc)

cores <- 8

# SPECS
lrl_spec <- linear_reg(penalty = tune(),
                       mixture = tune()) %>%
  set_engine("glmnet", num.threads = cores) %>%
  set_mode("regression")

bt_spec <- boost_tree(
      trees = tune(),
      mtry = tune(),
      min_n = tune(),
      tree_depth = tune(),
      learn_rate = tune(),
      loss_reduction = tune(),
      sample_size = tune(),
      stop_iter = tune()) %>%
      set_engine("lightgbm", num.threads = cores) %>%
      set_mode("regression") %>% translate()

# RECIPES
base_recipe <- recipe(total_score ~ ., data = df_train) %>%
  update_role(strain, new_role = "ID") %>%
  step_nzv(all_predictors()) %>%
  step_normalize(all_numeric_predictors()) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_nzv(all_predictors())

base_yj_recipe <- recipe(total_score ~ ., data = df_train) %>%
  update_role(strain, new_role = "ID") %>%
  step_nzv(all_predictors()) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_nzv(all_predictors()) %>%
  step_YeoJohnson(all_numeric_predictors()) %>%
  step_normalize(all_numeric_predictors()) 

base_orq_recipe <- recipe(total_score ~ ., data = df_train) %>%
  update_role(strain, new_role = "ID") %>%
  step_nzv(all_predictors()) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_orderNorm(all_numeric_predictors()) %>%
  step_normalize(all_numeric_predictors())

ncorr_yj_recipe <- recipe(total_score ~ ., data = df_train) %>%
  update_role(strain, new_role = "ID") %>%
  step_nzv(all_predictors()) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_nzv(all_predictors()) %>%
  step_YeoJohnson(all_numeric_predictors()) %>%
  step_normalize(all_numeric_predictors()) %>% 
  step_corr(all_predictors(), threshold = tune("corr_tune"))
```

### LR

```{r}
recipes_list <- list(base = base_recipe,
                     yj = base_yj_recipe,
                     orq = base_orq_recipe)

models_list <- list(LR = lrl_spec)

# WF set
models_wf_set <-
  workflow_set(preproc = recipes_list,
               models = models_list,
               cross = TRUE)

# exclude ncorr_LR from consideration
# models_wf_set <-
#   models_wf_set %>%
#   anti_join(tibble(wflow_id = c("ncorr_LR")),
#             by = "wflow_id")

set.seed(124)

models_res_set <-
  models_wf_set %>%
  workflow_map(
    "tune_grid",
    resamples = cv_folds,
    grid = 30,
    metrics = reg_metrics,
    verbose = TRUE,
    control = control_grid(save_pred = TRUE,
                           save_workflow = TRUE)
  )

autoplot(models_res_set, select_best=T)
```

```{r}
# this is done with 1-4 HR score scale
lr_wf <- workflow(preprocessor = base_recipe, spec = lrl_spec)

lr_res <- lr_wf %>% tune_grid(
    grid = 20,
    resamples = cv_folds,
    control = control_grid(save_pred = TRUE,
                           save_workflow = TRUE),
    metrics = metric_set(mae, rsq)
  ) 
  
lr_res %>% show_best(metric = "mae")
```

```{r}
lr_res %>% show_best(metric = "rsq")
```


### Rank models

#### RMSE

```{r}
rank_results(models_res_set, rank_metric = "rmse", select_best = TRUE) %>% 
  filter(.metric == "rmse") %>% 
  select(rank, mean, model, wflow_id, .config)
```

#### MAE

```{r}
rank_results(models_res_set, rank_metric = "mae", select_best = TRUE) %>% 
  filter(.metric == "mae") %>% 
  select(rank, mean, model, wflow_id, .config)
```

#### RSQ

```{r}
rank_results(models_res_set, rank_metric = "rsq", select_best = TRUE) %>% 
  filter(.metric == "rsq") %>% 
  select(rank, mean, model, wflow_id, .config)
```


#### CCC

```{r}
rank_results(models_res_set, rank_metric = "ccc", select_best = TRUE) %>% 
  filter(.metric == "ccc") %>% 
  select(rank, mean, model, wflow_id, .config)
```

