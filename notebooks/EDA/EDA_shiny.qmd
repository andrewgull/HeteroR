---
title: "Interactive EDA"
author: "AG"
format: 
  html: 
    page-layout: custom
server: shiny
---

```{r read_data, warning=FALSE, message=FALSE}
library(readr)
library(dplyr)


features_amp <- read_csv("/home/andrei/Data/HeteroR/results/tables/features_amp.csv")

features_amp_strain <- read_csv("data/features_amp_strain.csv")

# rename for consistency
features_amp_strain <- rename(features_amp_strain, "n.plasmids"=n_plasmids)
```

# Dot plots

```{r}
#| panel: sidebar
vars <- setdiff(names(features_amp_strain), "Variables")[-c(1, 3)]
selectInput('xcol', 'X Variable', vars)
selectInput('ycol', 'Y Variable', vars, selected = vars[[4]])
selectInput('group.var', 'Color by', vars[[2]], selected=vars[[2]])
#numericInput('size', 'Dot size', 1, min = 0.1, max = 3)
sliderInput("size", "Dot size", value=2, min = 0.1, max = 7)
sliderInput("alpha", "Transparency", value=0.5, min = 0.1, max = 1)

```

```{r}
#| panel: fill
plotOutput('pairs.plot')
```

```{r}
#| context: server

library(ggplot2)
library(dplyr)

selectedData <- reactive({
    df <- readr::read_csv("data/features_amp_strain.csv") %>%
      rename("n.plasmids"=n_plasmids)
    #features_amp_strain[, c(input$xcol, input$ycol, "resistance")]
  })

output$pairs.plot <- renderPlot({
  ggplot(selectedData(), aes_string(paste0("`",input$xcol,"`"), paste0("`",input$ycol,"`")))+
    geom_point(aes(color=unlist(selectedData()[,input$group.var])), size = input$size, alpha = input$alpha)+
    scale_color_brewer(palette="Set1", name="Resistance")+
    theme(legend.position = "bottom")
})
```


# Correlation plot

```{r}
#| panel: sidebar
vars <- setdiff(names(features_amp_strain), "Variables")[-c(1, 3, 4)]

sliderInput(inputId = "sample", label = "Sample size", value=length(vars), min = 2, max = length(vars), step = 1)


```

```{r}
#| panel: fill

plotOutput('corr.plot')
```


```{r}
#| context: server


library(dplyr)
library(readr)

selected_data <- reactive({
  df <- read_csv("data/features_amp_strain.csv")
  cor.matrix <- cor(as.matrix(df[, c(1:input$sample)]), use = "pairwise.complete.obs")
})

output$corr.plot <- renderPlot({
  corrplot::corrplot(selected_data(), hclust.method = "ward")
})

```

