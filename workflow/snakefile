configfile: "config.yaml"

rule all:
    input:
        expand("busco_results/{strain}", strain=config['strains'])

rule quality_check_illumina:
    input:
        "data_raw/{strain}/Illumina/renamed/{strain}_1.fq.gz"
    output:
        "qualcheck_reads/{strain}/Illumina/{strain}_summary.tsv"
    log: "logs/{strain}_illumina_qc.log"
    conda: "envs/rscripts.yaml"
    script:
        "scripts/run_qualcheck.R"

rule quality_check_trimmed:
    input:
        "data_filtered/{strain}/Illumina/{strain}_1.fq.gz"
    output:
        "qualcheck_reads/{strain}/Illumina_trimmed/{strain}_summary.tsv"
    log: "logs/{strain}_trimmed_qc.log"
    conda: "envs/rscripts.yaml"
    script:
        "scripts/run_qualcheck.R"

rule quality_check_nanopore:  # also builds length distribution plots
    input:
        "data_raw/{strain}/Nanopore/{strain}_all.fastq.gz"
    output:
        "qualcheck_reads/{strain}/Nanopore/{strain}_summary.tsv"
    log: "logs/{strain}_nanopore_qc.log"
    conda: "envs/rscripts.yaml"
    script:
        "scripts/run_qualcheck.R"

rule quality_check_filtered:
    input:
        "data_filtered/{strain}/Nanopore/{strain}_all.fastq.gz"
    output:
        "qualcheck_reads/{strain}/Nanopore_filtered/{strain}_summary.tsv"
    log: "logs/{strain}_filtered_qc.log"
    conda: "envs/rscripts.yaml"
    script:
        "scripts/run_qualcheck.R"

rule trim_illumina:
    input:
        short_read_1 = "data_raw/{strain}/Illumina/renamed/{strain}_1.fq.gz",
        short_read_2 = "data_raw/{strain}/Illumina/renamed/{strain}_2.fq.gz"
    output:
        short_read_1 = "data_filtered/{strain}/Illumina/{strain}_1.fq.gz",
        short_read_2 = "data_filtered/{strain}/Illumina/{strain}_2.fq.gz",
        report_html = "qualcheck_reads/fastp_reports/{strain}_report.html",
        report_json = "qualcheck_reads/fastp_reports/{strain}_report.json"
    wildcard_constraints: strain="DA[0-9]*"
    threads: 14
    message: "executing fastp with {threads} threads on {wildcards.strain} short reads"
    log: "logs/{strain}_fastp.log"
    conda: "envs/fastp.yaml"
    params: q="20", W="4", r="20", l="50", f="10"
    shell:
        # -q, --qualified_quality_phred
        # the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])
        # -W, --cut_window_size
        # the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])
        # -r, --cut_right
        # move a sliding window from front to tail, if meet one window with mean quality < threshold,
        # drop the bases in the window and the right part, and then stop.
        # -l, --length_required
        # reads shorter than length_required will be discarded, default is 15. (int [=15])
        # -y, --low_complexity_filter
        # enable low complexity filter. The complexity is defined as the percentage of base that is
        # different from its next base (base[i] != base[i+1]).
        # -f, --trim_front1
        # trimming how many bases in front for read1, default is 0 (int [=0])
        "fastp --in1 {input.short_read_1} --in2 {input.short_read_2} --out1 {output.short_read_1} "
        "--out2 {output.short_read_2} "
        "--thread {threads} --qualified_quality_phred {params.q} --cut_window_size {params.W} "
        "--cut_right {params.r} --length_required {params.l} --trim_front1 {params.f} --low_complexity_filter "
        "--html {output.report_html} --json {output.report_json} &> {log}"

rule filter_nanopore:
    input:
        "data_raw/{strain}/Nanopore/{strain}_all.fastq.gz"
    output:
        "data_filtered/{strain}/Nanopore/{strain}_all.fastq.gz"
    message:
        "executing filtlong on {wildcards.strain} long reads"
    log: "logs/{strain}_filtlong.log"
    conda: "envs/filtlong.yaml"
    threads: 14
    shell:
        "filtlong --min_length 1000 --keep_percent 90 {input} | pigz -c -p {threads} > {output} 2> {log}"

rule unicycler:
    input:
        short_read_1 = "data_filtered/{strain}/Illumina/{strain}_1.fq.gz",
        short_read_2 = "data_filtered/{strain}/Illumina/{strain}_2.fq.gz",
        long_read = "data_filtered/{strain}/Nanopore/{strain}_all.fastq.gz"
    output:
        directory("assemblies/{strain}")
    threads: 14
    message:
        "executing Unicycler with {threads} threads on {wildcards.strain} reads"
    log:
        "logs/{strain}_unicycler.log"
    conda: "envs/unicycler.yaml"
    shell:
        "unicycler -1 {input.short_read_1} -2 {input.short_read_2} -l {input.long_read} -t {threads} -o {output} &> {log}"

rule assembly_qualcheck:
    input:
        "assemblies/{strain}"
    output:
        directory("qualcheck_assembly/{strain}")
    threads: 14
    message: "executing BUSCO and QUAST with {threads} threads on {wildcards.strain} assembly"
    conda: "envs/busco_quast.yaml"
    script:
        "scripts/assembly_qualcheck.py"
