configfile: "config.yaml"

rule all:
    input:
        expand("busco_results/{strain}", strain=config['strains'])
# all quality_check_* rules produce all the expected files but job crashes with the following message (for ex):
# Job Missing files after 5 seconds:
# qualcheck/DA62942/Nanopore/DA62942_all.fastqc.zip
# TODO: separate Nanopore and Illumina related functionality: output files must correspond to what a rule actually outputs!
# TODO: move quality_check rules to another snakefile (if it makes sense) cuz now they are excluded from main workflow
rule quality_check_illumina:
    input:
        "data_raw/{strain}/Illumina/renamed/{strain}_1.fq.gz"
    output:
        "qualcheck/{strain}/Illumina/{strain}_summary.tsv"
    log: "logs/{strain}_illumina_qc.log"
    conda: "envs/rscripts.yaml"
    script:
        "scripts/run_qualcheck.R"

rule quality_check_trimmed:
    input:
        "data_filtered/{strain}/Illumina/{strain}_1.fq.gz"
    output:
        "qualcheck/{strain}/Illumina_trimmed/{strain}_summary.tsv"
    log: "logs/{strain}_trimmed_qc.log"
    conda: "envs/rscripts.yaml"
    script:
        "scripts/run_qualcheck.R"

rule quality_check_nanopore:  # also builds length distribution plots
    input:
        "data_raw/{strain}/Nanopore/{strain}_all.fastq.gz"
    output:
        "qualcheck/{strain}/Nanopore/{strain}_summary.tsv"
    log: "logs/{strain}_nanopore_qc.log"
    conda: "envs/rscripts.yaml"
    script:
        "scripts/run_qualcheck.R"

rule quality_check_filtered:
    input:
        "data_filtered/{strain}/Nanopore/{strain}_all.fastq.gz"
    output:
        "qualcheck/{strain}/Nanopore_filtered/{strain}_summary.tsv"
    log: "logs/{strain}_filtered_qc.log"
    conda: "envs/rscripts.yaml"
    script:
        "scripts/run_qualcheck.R"

rule auto_trim_illumina:
    input:
        short_read_1 = "data_raw/{strain}/Illumina/renamed/{strain}_1.fq.gz",
        short_read_2 = "data_raw/{strain}/Illumina/renamed/{strain}_2.fq.gz"
    output:
        short_read_1 = "data_filtered/{strain}/Illumina/{strain}_1.fq.gz",
        short_read_2 = "data_filtered/{strain}/Illumina/{strain}_2.fq.gz",
        report_html = "qualcheck/fastp_reports/{strain}_report.html",
        report_json = "qualcheck/fastp_reports/{strain}_report.json"
    wildcard_constraints: strain="DA[0-9]*"
    threads: 14
    message: "executing fastp with {threads} threads on {wildcards.strain} short reads"
    log: "logs/{strain}_fastp.log"
    conda: "envs/fastp.yaml"
    params: q="20", W="4", r="20", l="50", f="10"
    shell:
        # -q, --qualified_quality_phred
        # the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])
        # -W, --cut_window_size
        # the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])
        # -r, --cut_right
        # move a sliding window from front to tail, if meet one window with mean quality < threshold,
        # drop the bases in the window and the right part, and then stop.
        # -l, --length_required
        # reads shorter than length_required will be discarded, default is 15. (int [=15])
        # -y, --low_complexity_filter
        # enable low complexity filter. The complexity is defined as the percentage of base that is
        # different from its next base (base[i] != base[i+1]).
        # -f, --trim_front1
        # trimming how many bases in front for read1, default is 0 (int [=0])
        "fastp --in1 {input.short_read_1} --in2 {input.short_read_2} --out1 {output.short_read_1} "
        "--out2 {output.short_read_2} "
        "--thread {threads} --qualified_quality_phred {params.q} --cut_window_size {params.W} "
        "--cut_right {params.r} --length_required {params.l} --trim_front1 {params.f} --low_complexity_filter "
        "--html {output.report_html} --json {output.report_json} &> {log}"

rule filtlong:
    input:
        "data_raw/{strain}/Nanopore/{strain}_all.fastq.gz"
    output:
        "data_filtered/{strain}/Nanopore/{strain}_all.fastq.gz"
    message:
        "executing filtlong on {wildcards.strain} long reads"
    log: "logs/{strain}_filtlong.log"
    conda: "envs/filtlong.yaml"
    threads: 14
    shell:
        "filtlong --min_length 1000 --keep_percent 90 {input} | pigz -c -p {threads} > {output} &> {log}"

rule unicycler:
    input:
        short_read_1 = "data_filtered/{strain}/Illumina/{strain}_1.fq.gz",
        short_read_2 = "data_filtered/{strain}/Illumina/{strain}_2.fq.gz",
        long_read = "data_filtered/{strain}/Nanopore/{strain}_all.fastq.gz"
    output:
        # TODO: is there a way to specify output file not directory? It excludes the following two rules from main workflow
        directory("assemblies/{strain}")
    threads: 14
    message:
        "executing Unicycler with {threads} threads on {wildcards.strain} reads"
    log:
        "logs/{strain}_unicycler.log"
    conda: "envs/unicycler.yaml"
    shell:
        "unicycler -1 {input.short_read_1} -2 {input.short_read_2} -l {input.long_read} -t {threads} -o {output} &> {log}"

rule quast:
    # NOT INCLUDED in DAG because input != output of unicycler rule
    # TODO: is there a way to specify input directory not a file? (to include the rule to the main workflow)
    input:
        "assemblies/{strain}/assembly.fasta"
    output:
        directory("quast_results/{strain}")
    threads: 14
    message:
        "executing QUAST with {threads} threads on {wildcards.strain} assembly"
    log:
        "logs/{strain}_quast.log"
    conda: "envs/quast.yaml"
    shell:
        "quast.py -t {threads} -o {output} {input} &> {log}"

rule busco:
    # NOT INCLUDED in DAG because input != output of unicycler rule
    # TODO: is there a way to specify input directory not a file? (to include the rule to the main workflow)
    input:
        "assemblies/{strain}/assembly.fasta"
    output:
        directory("busco_results/{strain}")
    threads: 14
    message: "executing BUSCO with {threads} threads on {wildcards.strain} assembly"
    log: "logs/{strain}_busco.log"
    conda: "envs/busco.yaml"
    shell:
        "busco -m genome -i {input} -o busco_results --out_path {output} -l gammaproteobacteria_odb10 --cpu {threads} &> {log}"
